{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/components/ChoroplethMap.vue?b783","webpack:///./src/App.vue","webpack:///./src/components/ChoroplethMap.vue","webpack:///src/components/ChoroplethMap.vue","webpack:///./src/components/ChoroplethMap.vue?a074","webpack:///./src/components/ChoroplethMap.vue?aea5","webpack:///./src/components/YearSlider.vue","webpack:///src/components/YearSlider.vue","webpack:///./src/components/YearSlider.vue?2279","webpack:///./src/components/YearSlider.vue?6a1c","webpack:///./src/components/Scatterplot_1.vue","webpack:///src/components/Scatterplot_1.vue","webpack:///./src/components/Scatterplot_1.vue?5a99","webpack:///./src/components/Scatterplot_1.vue?4fcf","webpack:///./src/components/Scatterplot_2.vue","webpack:///src/components/Scatterplot_2.vue","webpack:///./src/components/Scatterplot_2.vue?bca7","webpack:///./src/components/Scatterplot_2.vue?c0ef","webpack:///./src/components/BarChart.vue","webpack:///src/components/BarChart.vue","webpack:///./src/components/BarChart.vue?ed3c","webpack:///./src/components/BarChart.vue?262f","webpack:///src/App.vue","webpack:///./src/App.vue?03b3","webpack:///./src/App.vue?315a","webpack:///./src/store/store.js","webpack:///./src/main.js","webpack:///./src/components/BarChart.vue?0ef6","webpack:///./src/App.vue?cf0a"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","render","_vm","this","_c","_self","attrs","staticClass","_m","staticRenderFns","_v","ref","svgWidth","svgHeight","on","removeSelection","staticStyle","props","innerWidth","innerHeight","svgPadding","top","right","bottom","left","mounted","drawMap","methods","$store","commit","svg","d3","$refs","chartGroup","projection","fitSize","mapWorld","pathGenerator","tooltip","selectAll","features","join","attr","countryData","filteredData","find","id","isSelected","selectedCountries","includes","carbonStocks","landCover","brushedCountries","getColorForCountry","event","landCoverTemp","carbonStocksTemp","disastersFreqTemp","hoveringLandCover","country","hoveringCarbonStocks","hoveringDisasters","disastersFreq","toFixed","transition","duration","style","html","properties","clientX","clientY","handleClick","countryId","colors","landCoverCategory","getLandCoverCategory","carbonStocksCategory","getCarbonStocksCategory","xFirstTick","landCoverMin","landCoverMax","xSecondTick","xThresholds","yFirstTick","carbonStocksMin","carbonStocksMax","ySecondTick","yThresholds","computed","combinedData","filter","combined","map","cs","landCoverData","disastersFreqData","getters","watch","handler","deep","component","model","selectedYear","callback","$$v","expression","_s","dash","color","getLabelColor","getFootprintLabel","year","set","val","resetZoom","zoomedXScale","zoomedYScale","paintChart","xScale","yScale","drawChart","drawXAxis","drawYAxis","addBrush","initialize","target","node","localbrushedCountries","forEach","drawPoints","brush","extent","onBrush","brushGroup","filteredPoints","x0","x1","y0","y1","idleTimeout","selection","invert","domain","range","setTimeout","select","move","xAxisGroup","axisX","xAxisText","enter","append","merge","text","yAxisGroup","axisY","yAxisText","pointsGroup","sort","a","b","aSelected","bSelected","xRange","yRange","inBoundData","cx","cy","update","exit","remove","raise","background","gridBackground","xValues","yValues","rangeRound","significantChange","energyGeneration","energyCapacity","renewable","nonRenewable","renewableEnergyTemp","nonRenewableEnergyTemp","sumEnergyCapacityByCountry","summedData","reduce","acc","item","capacity","parseFloat","values","totalRenewable","ec","accumulator","current","valueToAdd","Number","totalNonRenewable","renewableArray","nonRenewableArray","rn","totalNonRenewableData","nr","nonRenewableEnergyMax","maxNonRenewable","Math","max","roundedMax","ceil","nonRenewableEnergyMin","minNonRenewable","min","renewableEnergyMax","maxRenewable","renewableEnergyMin","minRenewable","chart","clientWidth","drawBars","selectedData","opacity","label","empty","barsGroup","brushedData","bandwidth","handleBarClick","carbonStocksData","brushedIds","x","filtered","dataMax","dataMin","padding","components","ChoroplethMap","YearSlider","Scatterplot_1","Scatterplot_2","BarChart","dispatch","Vue","use","Vuex","store","Store","state","energy","mutations","changeSelectedYear","changeSelectedCountries","removeSelectedCountries","changeBrushedCountries","removeSelectedCountry","filterDataBySelectedYear","filterEnergyDataByYear","actions","loadData","then","loadEnergyData","Country","ISO2","energyType","technology","Technology","BootstrapVue","IconsPlugin","config","productionTip","h","App","$mount"],"mappings":"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","file":"js/app.916a82c3.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ChoroplethMap.vue?vue&type=style&index=0&id=0bcb9606&prod&lang=css\"","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{attrs:{\"id\":\"app\"}},[_c('div',{staticClass:\"container-fluid\"},[_vm._m(0),_c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-md-2\"}),_c('div',{staticClass:\"col-md-8\"},[_c('YearSlider')],1),_c('div',{staticClass:\"col-md-2\"})]),_c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-md-1\"}),_c('div',{staticClass:\"col-md-5 border-container\"},[_c('ChoroplethMap')],1),_c('div',{staticClass:\"col-md-5 border-container\"},[_c('Scatterplot_1')],1),_c('div',{staticClass:\"col-md-1\"})]),_vm._m(1),_vm._m(2),_c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-md-1\"}),_c('div',{staticClass:\"col-md-5 energy-container\"},[_c('Scatterplot_2')],1),_c('div',{staticClass:\"col-md-5 border-container\"},[_c('BarChart')],1),_c('div',{staticClass:\"col-md-1\"})])])])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-md-12\"},[_c('h5',[_vm._v(\"Mitigation and Disaster Relief Project Identification: (Data for 1992 - 2020)\")])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"row\"},[_c('br')])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-md-12\"})])\n}]\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{ref:\"chart\",staticClass:\"vis-component\"},[_c('h6',[_vm._v(\"Carbon Stocks / Land Cover Map\")]),_c('svg',{attrs:{\"id\":\"map-svg\",\"width\":_vm.svgWidth,\"height\":_vm.svgHeight},on:{\"dblclick\":_vm.removeSelection}},[_c('defs',[_c('pattern',{attrs:{\"id\":\"stripes\",\"width\":\"4\",\"height\":\"4\",\"patternUnits\":\"userSpaceOnUse\",\"patternTransform\":\"rotate(45)\"}},[_c('rect',{attrs:{\"width\":\"2\",\"height\":\"4\",\"transform\":\"translate(0,0)\",\"fill\":\"white\"}})])]),_c('g',{ref:\"chartGroup\",staticClass:\"chart-group\"},[_c('g',{ref:\"gridBackground\",staticClass:\"grid-background\"}),_c('g',{ref:\"axisX\",staticClass:\"axis axis-x\"}),_c('g',{ref:\"axisY\",staticClass:\"axis axis-y\"}),_c('g',{ref:\"pointsGroup\",staticClass:\"points-group\"})])]),_c('div',{staticClass:\"tooltip\",staticStyle:{\"opacity\":\"0\"},attrs:{\"id\":\"tooltip\"}})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"vis-component\" ref=\"chart\">\n    <h6>Carbon Stocks / Land Cover Map</h6>\n    <svg id=\"map-svg\" :width=\"svgWidth\" :height=\"svgHeight\" @dblclick=\"removeSelection\">\n      <defs>\n        <pattern id=\"stripes\" width=\"4\" height=\"4\" patternUnits=\"userSpaceOnUse\" patternTransform=\"rotate(45)\">\n          <rect width=\"2\" height=\"4\" transform=\"translate(0,0)\" fill=\"white\"></rect>\n        </pattern>\n      </defs>\n      <g class=\"chart-group\" ref=\"chartGroup\">\n        <g class=\"grid-background\" ref=\"gridBackground\"></g>\n        <g class=\"axis axis-x\" ref=\"axisX\"></g>\n        <g class=\"axis axis-y\" ref=\"axisY\"></g>\n        <g class=\"points-group\" ref=\"pointsGroup\"></g>\n      </g>\n    </svg>\n    <div id=\"tooltip\" class=\"tooltip\" style=\"opacity:0;\"></div>\n  </div>\n</template>\n\n<script>\n\nimport mapWorld from '@/assets/world-geo.json';\nimport * as d3 from 'd3';\n\nexport default {\n  name: 'ChoroplethMap',\n  props: {\n  },\n  data() {\n    const svgWidth = window.innerWidth * 4 / 12;\n    const svgHeight = window.innerHeight * 0.35;\n    return {\n      svgWidth: svgWidth,\n      svgHeight: svgHeight,\n      svgPadding: {\n        top: 5, right: 15, bottom: 60, left: 60,\n      }\n    }\n  },\n  mounted() {\n    this.drawMap();\n  },\n  methods: {\n    removeSelection() {\n      this.$store.commit('removeSelectedCountries');\n    },\n    drawMap() {\n      const svg = d3.select(this.$refs.chartGroup);\n      const projection = d3.geoMercator().fitSize([this.svgWidth, this.svgHeight], mapWorld);\n\n      const pathGenerator = d3.geoPath().projection(projection);\n      const tooltip = d3.select(\"#tooltip\");\n\n      svg.selectAll('.country')\n        .data(mapWorld.features)\n        .join('path')\n        .attr('class', 'country')\n        .attr('d', pathGenerator)\n        .attr('transform', 'scale(1)')\n        .attr('fill', d => {\n          const countryData = this.filteredData.find(s => s.id === d.id);\n          const isSelected = this.selectedCountries.includes(d.id);\n          \n          if (countryData) {\n          if (countryData.carbonStocks > 200 || countryData.landCover > 130) {\n            return \"url(#stripes)\"; // Apply stripe pattern\n          } else {\n            if (isSelected) {\n              if (this.brushedCountries.includes(countryData.id)) {\n                \n                return 'rgb(253, 255, 181)';\n              } else {\n                return 'rgb(150, 150, 150)'\n              }\n            } else {\n              if (this.brushedCountries.includes(countryData.id)) {\n                return this.getColorForCountry(countryData);\n              } else {\n                return 'darkgrey';\n              }\n            }\n          }} else {\n            return 'darkgray';\n          }\n        })\n        .attr('opacity', 1)\n        .on('mouseover', (event, d) => {\n          let landCoverTemp;\n          let carbonStocksTemp;\n          let disastersFreqTemp;\n          const hoveringLandCover = this.landCover.find(country => country.id === d.id);\n          const hoveringCarbonStocks = this.carbonStocks.find(country => country.id === d.id);\n          const hoveringDisasters = this.disastersFreq.find(country => country.id === d.id)\n          if (hoveringLandCover) {\n            landCoverTemp = hoveringLandCover.value === 0 ? 'No Data' : hoveringLandCover.value.toFixed(4);\n          } else {\n            landCoverTemp = 'No Data';\n          }\n          if (hoveringCarbonStocks) {\n            carbonStocksTemp = hoveringCarbonStocks.value === 0 ? 'No Data' : hoveringCarbonStocks.value.toFixed(4);\n          } else {\n            carbonStocksTemp = 'No Data';\n          }\n          if (hoveringDisasters) {\n            disastersFreqTemp = hoveringDisasters.value === -1 ? 'No Data' : hoveringDisasters.value;\n          } else {\n            disastersFreqTemp = 'No Data';\n          }\n          tooltip.transition()\n            .duration(200)\n            .style('opacity', 1);\n\n            \n          tooltip.html(`\n            <table>\n              <tr><td class=\"label\">Country:</td>         <td class=\"value\">${d.properties.name}</td></tr>\n              <tr><td class=\"label\">CarbonStocks:</td>        <td class=\"value\">${carbonStocksTemp}</td></tr>\n              <tr><td class=\"label\">LandCoverIndex:</td>     <td class=\"value\">${landCoverTemp}</td></tr>\n              <tr><td class=\"label\">disastersFreq:</td>     <td class=\"value\">${disastersFreqTemp}</td></tr>\n            </table>\n          `)\n            .style('left', (event.clientX - 375) + 'px')\n            .style('top', (event.clientY - 100) + 'px');\n        })\n        .on('mouseout', function() {\n          tooltip.transition()\n            .duration(300)\n            .style('opacity', 0);\n        })\n        .on('click', (event, d) => this.handleClick(d.id))\n    },\n    handleClick(countryId) {\n      const isSelected = this.selectedCountries.includes(countryId);\n      if (!isSelected) {\n        this.$store.commit('changeSelectedCountries', countryId);\n      } else {\n        this.$store.commit('removeSelectedCountry', countryId);\n      }\n    },\n    getColorForCountry(countryData) {\n      const colors = [\n        \"rgb(230, 230, 230)\",\n        \"rgb(220, 183, 210)\", // 0 1 \n        \"rgb(211, 146, 194)\", // 0 0 \n        \"rgb(195, 238, 199)\", // 1 2 \n        \"rgb(151, 185, 199)\", \n        \"rgb(168, 140, 191)\", // 1 0 \n        \"rgb(148, 221, 166)\", // 2 2 \n        \"rgb(129, 186, 162)\", // 2 1 \n        \"rgb(107, 120, 155)\",\n      ];\n      let landCoverCategory = this.getLandCoverCategory(countryData.landCover);\n      let carbonStocksCategory = this.getCarbonStocksCategory(countryData.carbonStocks);\n\n      if (carbonStocksCategory === 'low' && landCoverCategory === 'low') return colors[0];\n      if (carbonStocksCategory === 'low' && landCoverCategory === 'medium') return colors[1];\n      if (carbonStocksCategory === 'low' && landCoverCategory === 'high') return colors[2];\n      if (carbonStocksCategory === 'medium' && landCoverCategory === 'low') return colors[3];\n      if (carbonStocksCategory === 'medium' && landCoverCategory === 'medium') return colors[4];\n      if (carbonStocksCategory === 'medium' && landCoverCategory === 'high') return colors[5];\n      if (carbonStocksCategory === 'high' && landCoverCategory === 'low') return colors[6];\n      if (carbonStocksCategory === 'high' && landCoverCategory === 'medium') return colors[7];\n      if (carbonStocksCategory === 'high' && landCoverCategory === 'high') return colors[8];\n      \n    },\n    getLandCoverCategory(landCover) {\n      const xFirstTick = this.landCoverMin + (this.landCoverMax - this.landCoverMin)/3;\n      const xSecondTick = this.landCoverMin + 2*(this.landCoverMax - this.landCoverMin)/3;\n      const xThresholds = [xFirstTick, xSecondTick];\n      if (landCover <= xThresholds[0]) return 'low';\n      if (landCover <= xThresholds[1]) return 'medium';\n      return 'high';\n    },\n\n    getCarbonStocksCategory(carbonStocks) {\n      const yFirstTick = this.carbonStocksMin + (this.carbonStocksMax - this.carbonStocksMin)/3;\n      const ySecondTick = this.carbonStocksMin + 2*(this.carbonStocksMax - this.carbonStocksMin)/3;\n      const yThresholds = [yFirstTick, ySecondTick]; \n      if (carbonStocks <= yThresholds[0]) return 'low';\n      if (carbonStocks <= yThresholds[1]) return 'medium';\n      return 'high';\n    },\n  },\n  computed: {\n    filteredData() {\n      return this.combinedData.filter(d => d.landCover !== 0);\n    },\n    combinedData() {\n      let combined = this.carbonStocks.map(cs => {\n        let landCoverData = this.landCover.find(landCover => landCover.id === cs.id);\n        let disastersFreqData = this.disastersFreq.find(disastersFreq => disastersFreq.id === cs.id);\n        return {\n          id: cs.id,\n          country: cs.country,\n          carbonStocks: cs.value,\n          landCover: landCoverData ? landCoverData.value: 0,\n          disastersFreq: disastersFreqData ? disastersFreqData.value: -1\n        };\n      });\n      return combined;\n    },\n    landCover: {\n      get() {\n        return this.$store.getters.landCover;\n      }\n    },\n    carbonStocks: {\n      get() {\n        return this.$store.getters.carbonStocks;\n      }\n    },\n    disastersFreq: {\n      get() {\n        return this.$store.getters.disastersFreq;\n      }\n    },\n    selectedCountries: {\n      get() {\n        return this.$store.getters.selectedCountries;\n      }\n    },\n    brushedCountries: {\n      get() {\n        return this.$store.getters.brushedCountries;\n      }\n    },\n    carbonStocksMax() {\n      return 200;\n    },\n    carbonStocksMin() {\n      return 0;\n    },\n    landCoverMax() {\n      return 130;\n    },\n    landCoverMin() {\n      return 70;\n    },\n  },\n\n  watch: {\n    disastersFreq: {\n      handler() {\n        this.drawMap();\n      },\n      deep: true,\n    },\n    carbonStocks: {\n      handler() {\n        this.drawMap();\n      },\n      deep: true,\n    },\n    landCover: {\n      handler() {\n        this.drawMap();\n      },\n      deep: true,\n    },\n    brushedCountries: {\n      handler() {\n        this.drawMap();\n      },\n      deep: true,\n    },\n    selectedCountries: {\n      handler() {\n        this.drawMap();\n      },\n      deep: true,\n    }\n  },\n}\n</script>\n\n<style>\n  .country {\n    stroke: #5b5b5b;\n    stroke-width: 1px;\n  }\n\n  .country:hover {\n    fill-opacity: 0.7;\n    stroke: rgb(253, 255, 181);\n  }\n\n  .tooltip {\n    position: absolute;\n    text-align: center;\n    padding: 8px;\n    font: 12px sans-serif;\n    background: rgb(253, 241, 252);\n    border: 1px;\n    border-radius: 8px;\n    pointer-events: none;\n  }\n\n.tooltip table {\n  width: 100%;\n  border-collapse: collapse;\n}\n\n.tooltip .label {\n  width: 150px;\n  text-align: left;\n  font-size: 12px;\n  white-space: nowrap;\n}\n\n.tooltip .country_value {\n  width: 300px;\n  text-align: right;\n  font-size: 12px;\n  white-space: nowrap;\n}\n\n.tooltip .value {\n  width: 150px;\n  font-size: 12px;\n  text-align: right;\n  white-space: nowrap;\n}\n\n.small-country-circle {\n    stroke: red; /* Adjust the color as needed */\n    stroke-width: 3;\n    opacity: 0.7;\n}\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ChoroplethMap.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ChoroplethMap.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./ChoroplethMap.vue?vue&type=template&id=0bcb9606\"\nimport script from \"./ChoroplethMap.vue?vue&type=script&lang=js\"\nexport * from \"./ChoroplethMap.vue?vue&type=script&lang=js\"\nimport style0 from \"./ChoroplethMap.vue?vue&type=style&index=0&id=0bcb9606&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('label',{staticStyle:{\"font-size\":\"16px\",\"font-weight\":\"bold\"},attrs:{\"for\":\"range-year\"}},[_vm._v(\"Year Selection\")]),_c('b-form-input',{attrs:{\"id\":\"range-year\",\"type\":\"range\",\"min\":\"1992\",\"max\":\"2022\"},model:{value:(_vm.selectedYear),callback:function ($$v) {_vm.selectedYear=$$v},expression:\"selectedYear\"}}),_c('div',{staticClass:\"mt-2\",staticStyle:{\"font-size\":\"12px\"}},[_vm._v(\" Selected Year: \"+_vm._s(_vm.selectedYear)+\" \"+_vm._s(_vm.dash(_vm.selectedYear))),_c('span',{style:({ color: _vm.getLabelColor(_vm.selectedYear) })},[_vm._v(_vm._s(_vm.getFootprintLabel(_vm.selectedYear)))])])],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div>\n    <label for=\"range-year\" style=\"font-size: 16px; font-weight: bold;\">Year Selection</label>\n    <b-form-input id=\"range-year\" v-model=\"selectedYear\" type=\"range\" min=\"1992\" max=\"2022\"></b-form-input>\n    <div class=\"mt-2\" style=\"font-size: 12px;\">\n      Selected Year: {{ selectedYear }} {{ dash(selectedYear) }}<span :style=\"{ color: getLabelColor(selectedYear) }\">{{ getFootprintLabel(selectedYear) }}</span>\n      </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'YearSlider',\n  props: {\n  },\n  data() {\n    return {\n    }\n  },\n  mounted() {\n  },\n  methods: {\n    getFootprintLabel(year) {\n      if (year > 2020) {\n        return `(Carbon Footprint showing data for: 2020)`;\n      } else if (year < 2000) {\n        return `(Energy Transition showing data for: 2000)`;\n      } else {\n        return '';\n      }\n    },\n    getLabelColor(year) {\n      return year > 2020 || year < 2000? 'red' : 'inherit';\n    },\n    dash(year) {\n      if (year > 2020) {\n        return ` - `;\n      } else if (year < 2000) {\n        return ` - `;\n      } else {\n        return '';\n      }\n    }\n  },\n  computed: {\n    selectedYear: {\n      get() {\n        return this.$store.getters.selectedYear;\n      },\n      set(val) {\n        this.$store.commit('changeSelectedYear', val);\n      },\n    },\n  },\n  watch: {\n  },\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./YearSlider.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./YearSlider.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./YearSlider.vue?vue&type=template&id=d6ec0068&scoped=true\"\nimport script from \"./YearSlider.vue?vue&type=script&lang=js\"\nexport * from \"./YearSlider.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"d6ec0068\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{ref:\"chart\",staticClass:\"vis-component\"},[_c('h6',[_vm._v(\"Carbon Stocks / Land Cover Information per Country\")]),_c('svg',{attrs:{\"id\":\"scatter1-svg\",\"width\":_vm.svgWidth,\"height\":_vm.svgHeight},on:{\"dblclick\":_vm.resetZoom}},[_c('g',{ref:\"chartGroup\",staticClass:\"chart-group\"},[_c('g',{ref:\"gridBackground\",staticClass:\"grid-background\"}),_c('g',{ref:\"brushGroup\",staticClass:\"brush-group\"}),_c('g',{ref:\"axisX\",staticClass:\"axis axis-x\"}),_c('g',{ref:\"axisY\",staticClass:\"axis axis-y\"}),_c('g',{ref:\"pointsGroup\",staticClass:\"points-group\"})])]),_c('div',{staticClass:\"tooltip\",staticStyle:{\"opacity\":\"0\"},attrs:{\"id\":\"tooltip\"}})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"vis-component\" ref=\"chart\">\n    <h6>Carbon Stocks / Land Cover Information per Country</h6>\n    <svg id=\"scatter1-svg\" :width=\"svgWidth\" :height=\"svgHeight\" @dblclick=\"resetZoom\">\n      <g class=\"chart-group\" ref=\"chartGroup\">\n        <g class=\"grid-background\" ref=\"gridBackground\"></g>\n        <g class=\"brush-group\" ref=\"brushGroup\"></g>\n        <g class=\"axis axis-x\" ref=\"axisX\"></g>\n        <g class=\"axis axis-y\" ref=\"axisY\"></g>\n        <g class=\"points-group\" ref=\"pointsGroup\"></g>\n      </g>\n    </svg>\n    \n    <div id=\"tooltip\" class=\"tooltip\" style=\"opacity:0;\"></div>\n  </div>\n</template>\n\n<script>\n\nimport * as d3 from 'd3';\n\nexport default {\n  name: 'Scatterplot_1',\n  props: {\n  },\n  data() {\n    const svgWidth = window.innerWidth * 4 / 12;\n    const svgHeight = window.innerHeight * 0.35;\n    return {\n      zoomedXScale: null,\n      zoomedYScale: null,\n      svgWidth: svgWidth,\n      svgHeight: svgHeight,\n      svgPadding: {\n        top: 5, right: 15, bottom: 60, left: 60,\n      },\n    }\n  },\n  mounted() {\n    this.paintChart(this.xScale, this.yScale);\n    this.drawChart(this.xScale, this.yScale);\n    this.drawXAxis(this.xScale);\n    this.drawYAxis(this.yScale);\n    this.addBrush();\n    this.initialize();\n\n    d3.select('#scatter1-svg').on('click', (event) => {\n      if (event.target === d3.select('#scatter1-svg').node()) {\n        this.removeSelection();\n      }\n    });\n  },\n  methods: {\n    removeSelection() {\n      this.$store.commit('removeSelectedCountries');\n    },\n    initialize() {\n      var localbrushedCountries = [];\n      this.filteredData.forEach(d => localbrushedCountries.push(d.id));\n      this.$store.commit('changeBrushedCountries', localbrushedCountries);\n    },\n    resetZoom() {\n      this.zoomedXScale = null;\n      this.zoomedYScale = null;\n      this.paintChart(this.xScale, this.yScale);\n      this.drawChart(this.xScale, this.yScale);\n      this.initialize()\n    },\n    // called for each updage\n    drawChart(xScale, yScale) {\n      xScale = xScale || this.xScale;\n      yScale = yScale || this.yScale;\n\n      // Update axes\n      this.drawXAxis(xScale);\n      this.drawYAxis(yScale);\n      \n      d3.select(this.$refs.chartGroup)\n        .attr('transform', `translate(${this.svgPadding.left},${this.svgPadding.top})`);\n      this.drawPoints(xScale, yScale);\n    },\n    // brush for showing on choroplethmap\n    addBrush() {\n      this.brush = d3.brush()\n        .extent([[0,0], [this.svgWidth - this.svgPadding.left - this.svgPadding.right, \n          this.svgHeight - this.svgPadding.bottom - this.svgPadding.top]])\n        .on('end', this.onBrush);\n      \n      d3.select(this.$refs.brushGroup)\n        .attr('class', 'brush')\n        .call(this.brush);\n    },\n    // get states in brush\n    onBrush(event) {\n      const filteredPoints = this.filteredData.filter(d => this.brushedCountries.includes(d.id));\n      var selection = event.selection;\n      var localbrushedCountries = [];\n      \n      var x0,x1,y0,y1,idleTimeout;\n      if (!selection) {\n        filteredPoints.forEach(d => localbrushedCountries.push(d.id));\n        if (!idleTimeout) return idleTimeout = setTimeout(() => {\n          idleTimeout = null\n        }, 1);\n      } else {\n        // Calculate new scales for zoom\n        if (this.zoomedXScale) {\n          x0 = this.zoomedXScale.invert(selection[0][0]);\n          x1 = this.zoomedXScale.invert(selection[1][0]);\n          y0 = this.zoomedYScale.invert(selection[1][1]);\n          y1 = this.zoomedYScale.invert(selection[0][1]);\n        } else {\n          x0 = this.xScale.invert(selection[0][0]);\n          x1 = this.xScale.invert(selection[1][0]);\n          y0 = this.yScale.invert(selection[1][1]);\n          y1 = this.yScale.invert(selection[0][1]);\n        }\n\n        this.zoomedXScale = d3.scaleLinear().domain([x0, x1]).range([0, this.svgWidth - this.svgPadding.left - this.svgPadding.right]);\n        this.zoomedYScale = d3.scaleLinear().domain([y0, y1]).range([this.svgHeight - this.svgPadding.top - this.svgPadding.bottom, 0]);\n\n        // Redraw chart with new scales\n        this.drawChart(this.zoomedXScale, this.zoomedYScale);\n\n        // Filter brushed countries\n        filteredPoints.forEach(d => {\n          if (d.carbonStocks >= y0 && d.carbonStocks <= y1 && d.landCover >= x0 && d.landCover <= x1) {\n            localbrushedCountries.push(d.id);\n          }\n        });\n        \n      }\n\n      this.paintChart(this.zoomedXScale, this.zoomedYScale)\n\n      d3.select('#scatter1-svg').select(\".brush\").call(this.brush.move, null)\n\n      this.$store.commit('changeBrushedCountries', localbrushedCountries);\n    },\n    // X-axis\n    drawXAxis(xScale) {\n      const xAxisGroup = d3.select(this.$refs.axisX)\n        .attr('transform', `translate(0, ${this.svgHeight - this.svgPadding.top - this.svgPadding.bottom})`)\n        .call(d3.axisBottom(xScale))\n        .style('font-size', '10');\n\n      const xAxisText = xAxisGroup.selectAll('.x-axis-label').data(['Land Cover Index (Compared to 2015)']);\n\n      xAxisText.enter()\n        .append('text')\n        .attr('class', 'x-axis-label')\n        .merge(xAxisText)\n        .attr('x', this.svgWidth/2 + this.svgPadding.left + this.svgPadding.right + 5)\n        .attr('y', this.svgPadding.bottom - 10)\n        .attr('text-anchor', 'end')\n        .style('fill', 'black')\n        .style('font-size', '14px')\n        .text(d => d);\n      },\n    // Y-axis\n    drawYAxis(yScale) {\n      const yAxisGroup = d3.select(this.$refs.axisY)\n        .attr('transform', `translate( 0, 0)`)\n        .call(d3.axisLeft(yScale))\n        .style('font-size', '10');\n        \n      const yAxisText = yAxisGroup.selectAll('.y-axis-label').data(['Carbon Stocks']);\n\n      yAxisText.enter()\n        .append('text')\n        .attr('class', 'y-axis-label')\n        .merge(yAxisText)\n        .attr('transform', 'rotate(-90)')\n        .attr('y', -this.svgPadding.left + 5)\n        .attr('x', -this.svgHeight/4 + this.svgPadding.top + this.svgPadding.bottom + 10)\n        .attr('dy', '0.71em')\n        .attr('text-anchor', 'end') \n        .attr('fill', 'black')\n        .style('font-size', '14px')\n        .text(\"Carbon Stocks Index (Compared to 1992)\");\n    },\n    // add country points on scatterplot\n    drawPoints(xScale, yScale) {\n      const pointsGroup = d3.select(this.$refs.pointsGroup);\n      const filteredPoints = this.filteredData.filter(d => this.brushedCountries.includes(d.id));\n\n      const tooltip = d3.select(\"#tooltip\");\n      const transition = d3.transition().duration(750);\n      filteredPoints.sort((a, b) => {\n        const aSelected = this.selectedCountries.includes(a.id);\n        const bSelected = this.selectedCountries.includes(b.id);\n        return aSelected === bSelected ? 0 : aSelected ? 1 : -1;\n      });\n      const xRange = xScale.range();\n      const yRange = yScale.range();\n      const inBoundData = filteredPoints.filter(d => {\n\n        const cx = xScale(d.landCover);\n        const cy = yScale(d.carbonStocks);\n        \n\n\n        return cx >= xRange[0] && cx <= xRange[1] && cy <= yRange[0] && cy >= yRange[1];\n      });\n\n\n      pointsGroup.selectAll('.point')\n        .data(inBoundData, function(d) { return d.id; })\n        .join(\n          enter => enter.append('circle')\n                        .attr('class', 'point')\n                        .attr('cx', d => xScale(d.landCover))\n                        .attr('cy', this.svgHeight - this.svgPadding.bottom) // start from bottom\n                        .attr('r', 6) // start from zero radius\n                        .call(enter => enter.transition(transition)\n                            .attr('cy', d => yScale(d.carbonStocks))\n                            .attr('r', 6)),\n          update => update.call(update => update.transition(transition)\n                            .attr('cx', d => xScale(d.landCover))\n                            .attr('cy', d => yScale(d.carbonStocks))),\n          exit => exit.call(exit => exit.transition(transition)\n                            .attr('cy', this.svgHeight - this.svgPadding.bottom)\n                            .attr('r', 0)\n                            .remove())\n        )\n        .attr('fill', d => this.selectedCountries.includes(d.id) ? \"rgb(253, 255, 181)\" : \"rgb(1, 39, 39)\")\n        \n        .on('mouseover', function(event, d) {\n          d3.select(this)\n            .raise()\n            .attr('stroke', 'aqua')\n            .attr('stroke-width', 2);\n          let landCoverTemp = d.landCover === 0 ? 'No Data' : d.landCover.toFixed(2);\n          let carbonStocksTemp = d.carbonStocks === 0 ? 'No Data' : d.carbonStocks.toFixed(2);\n          let disastersFreqTemp = d.disastersFreq === -1 ? 'No Data' : d.disastersFreq;\n          tooltip.transition()\n            .duration(200)\n            .style('opacity', 1);\n          tooltip.html(`\n            <table>\n              <tr><td class=\"label\">Country:</td>         <td class=\"country_value\">${d.country}</td></tr>\n              <tr><td class=\"label\">Carbon Stocks:</td>     <td class=\"value\">${carbonStocksTemp}</td></tr>\n              <tr><td class=\"label\">Land Cover:</td>        <td class=\"value\">${landCoverTemp}</td></tr>\n              <tr><td class=\"label\">Disasters Frequency:</td>     <td class=\"value\">${disastersFreqTemp}</td></tr>\n            </table>\n          `)\n          .style('left', (event.clientX - 275) + 'px')\n          .style('top', (event.clientY - 100) + 'px');\n        })\n        .on('mouseout', function() {\n          d3.select(this)\n            .attr('r', 6)\n            .attr('stroke', 'none')\n            .attr('stroke-width', 0);\n          tooltip.transition()\n            .duration(500)\n            .style('opacity', 0);\n        })\n        .on('click', (event, d) => this.handleClick(d.id));\n\n    },\n    handleClick(countryId) {\n      const isSelected = this.selectedCountries.includes(countryId);\n      if (!isSelected) {\n        this.$store.commit('changeSelectedCountries', countryId);\n      } else {\n        this.$store.commit('removeSelectedCountry', countryId);\n      }\n    },\n      \n    // coloring the grid\n    paintChart(xScale, yScale) {\n      xScale = xScale || this.xScale;\n      yScale = yScale || this.yScale;\n      const background = d3.select(this.$refs.gridBackground);\n      background.selectAll('rect').remove()\n      background.selectAll('#plot-area-clip-background').remove()\n      const colors = [\n        \"rgb(230, 230, 230)\",\n        \"rgb(220, 183, 210)\", // 0 1 \n        \"rgb(211, 146, 194)\", // 0 0 \n        \"rgb(195, 238, 199)\", // 1 2 \n        \"rgb(151, 185, 199)\", \n        \"rgb(168, 140, 191)\", // 1 0 \n        \"rgb(148, 221, 166)\", // 2 2 \n        \"rgb(129, 186, 162)\", // 2 1 \n        \"rgb(107, 120, 155)\",\n      ];\n      background.append(\"defs\").append(\"clipPath\")\n        .attr(\"id\", \"plot-area-clip-background\")\n        .append(\"rect\")\n        .attr(\"width\", this.svgWidth - this.svgPadding.left - this.svgPadding.right)\n        .attr(\"height\", this.svgHeight - this.svgPadding.top - this.svgPadding.bottom);\n      const xFirstTick = this.landCoverMin + (this.landCoverMax - this.landCoverMin)/3;\n      const xSecondTick = this.landCoverMin + 2*(this.landCoverMax - this.landCoverMin)/3;\n      const xValues = [this.landCoverMin, xFirstTick, xSecondTick, this.landCoverMax];\n      const yFirstTick = this.carbonStocksMin + (this.carbonStocksMax - this.carbonStocksMin)/3;\n      const ySecondTick = this.carbonStocksMin + 2*(this.carbonStocksMax - this.carbonStocksMin)/3;\n      const yValues = [this.carbonStocksMin, yFirstTick, ySecondTick,this.carbonStocksMax];\n      for (let i = 0; i < yValues.length - 1; i++) {\n        for (let j = 0; j < xValues.length - 1; j++) {\n          background.append('rect')\n            .attr('x', xScale(xValues[j]))\n            .attr('y', yScale(yValues[i+1]))\n            .attr('width', (xScale(xValues[j+1]) - xScale(j)))\n            .attr('height', (yScale(yValues[i]) - yScale(yValues[i+1])))\n            .attr(\"clip-path\", \"url(#plot-area-clip-background)\")\n            .attr('fill', colors[j + i * 3])\n            .attr('opacity', 1);\n          background.append('rect')\n            .attr('x', xScale(xValues[j]))\n            .attr('y', yScale(yValues[i+1]))\n            .attr('width', 0)  // Start with a width of 0 for the transition\n            .attr('height', 0) // Start with a height of 0 for the transition\n            .attr(\"clip-path\", \"url(#plot-area-clip-background)\")\n            .attr('fill', colors[j + i * 3])\n            .attr('opacity', 0) // Start with an opacity of 0 for the transition\n            .attr('width', xScale(xValues[j+1]) - xScale(xValues[j]))\n            .attr('height', yScale(yValues[i]) - yScale(yValues[i+1]))\n            .attr('opacity', 1);\n        }\n      }\n    },\n  },\n  computed: {\n    filteredData() {\n      return this.combinedData.filter(d => d.landCover !== 0);\n    },\n    combinedData() {\n      let combined = this.carbonStocks.map(cs => {\n        let landCoverData = this.landCover.find(landCover => landCover.id === cs.id);\n        let disastersFreqData = this.disastersFreq.find(disastersFreq => disastersFreq.id === cs.id);\n        return {\n          id: cs.id,\n          country: cs.country,\n          carbonStocks: cs.value,\n          landCover: landCoverData ? landCoverData.value: 0,\n          disastersFreq: disastersFreqData ? disastersFreqData.value: -1\n        };\n      });\n      return combined;\n    },\n    landCover: {\n      get() {\n        return this.$store.getters.landCover;\n      }\n    },\n    carbonStocks: {\n      get() {\n        return this.$store.getters.carbonStocks;\n      }\n    },\n    disastersFreq: {\n      get() {\n        return this.$store.getters.disastersFreq;\n      }\n    },\n    carbonStocksMax() {\n      return 200;\n    },\n    carbonStocksMin() {\n      return 0;\n    },\n    landCoverMax() {\n      return 130;\n    },\n    landCoverMin() {\n      return 70;\n    },\n    xScale() {\n      return d3.scaleLinear()\n        .rangeRound([0, this.svgWidth - this.svgPadding.left - this.svgPadding.right])\n        .domain([this.landCoverMin, this.landCoverMax]);\n    },\n    yScale() {\n      return d3.scaleLinear()\n        .rangeRound([this.svgHeight - this.svgPadding.top - this.svgPadding.bottom, 0])\n        .domain([this.carbonStocksMin, this.carbonStocksMax]);\n    },\n    \n    brushedCountries: {\n      get() {\n        return this.$store.getters.brushedCountries;\n      }\n    },\n    selectedCountries: {\n      get() {\n        return this.$store.getters.selectedCountries;\n      }\n    }\n  },\n  watch: {\n    landCover: {\n      handler() {\n        let xScale = this.zoomedXScale || this.xScale;\n        let yScale = this.zoomedYScale || this.yScale;\n        this.drawChart(xScale, yScale);\n      },\n      deep: true,\n    },\n    carbonStocks: {\n      handler() {\n        let xScale = this.zoomedXScale || this.xScale;\n        let yScale = this.zoomedYScale || this.yScale;\n        this.drawChart(xScale, yScale);\n      },\n      deep: true,\n    },\n    disastersFreq: {\n      handler() {\n        let xScale = this.zoomedXScale || this.xScale;\n        let yScale = this.zoomedYScale || this.yScale;\n        this.drawChart(xScale, yScale);\n      },\n      deep: true,\n    },\n    selectedCountries: {\n      handler() {\n        this.drawChart(this.zoomedXScale, this.zoomedYScale);\n      },\n      deep: true,\n    },\n    filteredData: {\n      handler() {\n        this.initialize();\n      },\n      deep: true,\n    },\n    brushedCountries: {\n      handler() {\n        if (this.zoomedXScale && this.zoomedYScale) {\n          this.drawPoints(this.zoomedXScale, this.zoomedYScale);\n        } else {\n          this.drawPoints(this.xScale, this.yScale);\n        }\n      },\n      deep: true,\n    }\n  },\n}\n</script>\n\n<style>\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Scatterplot_1.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Scatterplot_1.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Scatterplot_1.vue?vue&type=template&id=0237940e\"\nimport script from \"./Scatterplot_1.vue?vue&type=script&lang=js\"\nexport * from \"./Scatterplot_1.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{ref:\"chart\",staticClass:\"vis-component\"},[_vm._m(0),_c('svg',{attrs:{\"id\":\"scatter2-svg\",\"width\":_vm.svgWidth,\"height\":_vm.svgHeight},on:{\"dblclick\":_vm.resetZoom}},[_c('g',{ref:\"chartGroup\",staticClass:\"chart-group\"},[_c('g',{ref:\"gridBackground\",staticClass:\"grid-background\"}),_c('g',{ref:\"brushGroup\",staticClass:\"brush-group\"}),_c('g',{ref:\"axisX\",staticClass:\"axis axis-x\"}),_c('g',{ref:\"axisY\",staticClass:\"axis axis-y\"}),_c('g',{ref:\"pointsGroup\",staticClass:\"points-group\"})])]),_c('div',{staticClass:\"tooltip\",staticStyle:{\"opacity\":\"0\"},attrs:{\"id\":\"tooltip\"}})])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('h6',[_c('h5',[_vm._v(\"Renewable Energy Transition Project Identification: (Data for 2000 - 2022)\")])])\n}]\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"vis-component\" ref=\"chart\">\n    <h6><h5>Renewable Energy Transition Project Identification: (Data for 2000 - 2022)</h5></h6>\n    <svg id=\"scatter2-svg\" :width=\"svgWidth\" :height=\"svgHeight\" @dblclick=\"resetZoom\">\n      <g class=\"chart-group\" ref=\"chartGroup\">\n        <g class=\"grid-background\" ref=\"gridBackground\"></g>\n        <g class=\"brush-group\" ref=\"brushGroup\"></g>\n        <g class=\"axis axis-x\" ref=\"axisX\"></g>\n        <g class=\"axis axis-y\" ref=\"axisY\"></g>\n        <g class=\"points-group\" ref=\"pointsGroup\"></g>\n      </g>\n    </svg>\n    \n    <div id=\"tooltip\" class=\"tooltip\" style=\"opacity:0;\"></div>\n  </div>\n</template>\n\n<script>\n\nimport * as d3 from 'd3';\n\nexport default {\n  name: 'Scatterplot_1',\n  props: {\n  },\n  data() {\n    const svgWidth = window.innerWidth * 4 / 12;\n    const svgHeight = window.innerHeight * 0.35;\n    return {\n      zoomedXScale: null,\n      zoomedYScale: null,\n      svgWidth: svgWidth,\n      svgHeight: svgHeight,\n      svgPadding: {\n        top: 5, right: 15, bottom: 60, left: 60,\n      },\n      significantChange: false,\n    }\n  },\n  mounted() {\n    this.drawChart(this.xScale, this.yScale);\n    this.addBrush();\n    this.initialize();\n    // this.paintChart(this.xScale, this.yScale);\n\n  },\n  methods: {\n    initialize() {\n      var localbrushedCountries = [];\n      this.filteredData.forEach(d => localbrushedCountries.push(d.id));\n    },\n    resetZoom() {\n      this.zoomedXScale = null;\n      this.zoomedYScale = null;\n      // this.paintChart(this.xScale, this.yScale);\n      this.drawChart(this.xScale, this.yScale);\n      this.initialize()\n    },\n    // called for each updage\n    drawChart(xScale, yScale) {\n      xScale = xScale || this.xScale;\n      yScale = yScale || this.yScale;\n\n      // Update axes\n      this.drawXAxis(xScale);\n      this.drawYAxis(yScale);\n      \n      d3.select(this.$refs.chartGroup)\n        .attr('transform', `translate(${this.svgPadding.left},${this.svgPadding.top})`);\n      this.drawPoints(xScale, yScale);\n      // this.paintChart(xScale, yScale);\n    },\n    // brush for showing on choroplethmap\n    addBrush() {\n      this.brush = d3.brush()\n        .extent([[0,0], [this.svgWidth - this.svgPadding.left - this.svgPadding.right, \n          this.svgHeight - this.svgPadding.bottom - this.svgPadding.top]])\n        .on('end', this.onBrush);\n      \n      d3.select(this.$refs.brushGroup)\n        .attr('class', 'brush')\n        .call(this.brush);\n    },\n    // get states in brush\n    onBrush(event) {\n      this.significantChange = true;\n      var selection = event.selection;\n      var localbrushedCountries = [];\n      var x0,x1,y0,y1,idleTimeout;\n      if (!selection) {\n        // Reset zoom and clear brushed countries\n        this.filteredData.forEach(d => localbrushedCountries.push(d.id));\n        if (!idleTimeout) return idleTimeout = setTimeout(() => {\n          idleTimeout = null\n        }, 1)    \n      } else {\n        // Calculate new scales for zoom\n        if (this.zoomedXScale) {\n          x0 = this.zoomedXScale.invert(selection[0][0]);\n          x1 = this.zoomedXScale.invert(selection[1][0]);\n          y0 = this.zoomedYScale.invert(selection[1][1]);\n          y1 = this.zoomedYScale.invert(selection[0][1]);\n        } else {\n          x0 = this.xScale.invert(selection[0][0]);\n          x1 = this.xScale.invert(selection[1][0]);\n          y0 = this.yScale.invert(selection[1][1]);\n          y1 = this.yScale.invert(selection[0][1]);\n        }\n\n        this.zoomedXScale = d3.scaleLinear().domain([x0, x1]).range([0, this.svgWidth - this.svgPadding.left - this.svgPadding.right]);\n        this.zoomedYScale = d3.scaleLinear().domain([y0, y1]).range([this.svgHeight - this.svgPadding.top - this.svgPadding.bottom, 0]);\n\n        this.drawChart(this.zoomedXScale, this.zoomedYScale);\n\n        this.filteredData.forEach(d => {\n          if (d.energyGeneration >= y0 && d.energyGeneration <= y1 && d.energyCapacity >= x0 && d.energyCapacity <= x1) {\n            localbrushedCountries.push(d.id);\n          }\n        });\n        \n      }\n\n      // this.paintChart(this.zoomedXScale, this.zoomedYScale);\n\n      d3.select('#scatter2-svg').select(\".brush\").call(this.brush.move, null);\n    },\n    drawXAxis(xScale) {\n      const xAxisGroup = d3.select(this.$refs.axisX)\n        .attr('transform', `translate(0, ${this.svgHeight - this.svgPadding.top - this.svgPadding.bottom})`)\n        .call(d3.axisBottom(xScale));\n\n      // Rotate the ticks\n      xAxisGroup.selectAll(\".tick text\")\n      .attr(\"transform\", \"rotate(50)\")\n      .attr(\"x\", 9)\n      .attr(\"y\", 0)\n      .style(\"text-anchor\", \"start\");\n\n      // Position the axis label\n      xAxisGroup.append('text')\n      .attr('class', 'x-axis-label')\n      .attr('x', this.svgWidth / 2)\n      .attr('y', this.svgPadding.bottom - 5)\n\n      \n      .style('text-anchor', 'middle')\n      .style('fill', 'black')\n      .style('font-size', '12px')\n      .text('Renewable Energy Capacity');\n    },\n    drawYAxis(yScale) {\n      const yAxisGroup = d3.select(this.$refs.axisY)\n        .attr('transform', `translate(0, 0)`)\n        .call(d3.axisLeft(yScale))\n        .style('font-size', '10px');\n\n      // Rotate the ticks\n      yAxisGroup.selectAll('.tick text')\n        .attr('transform', 'rotate(-50)')\n        .style('text-anchor', 'end');\n\n      // Remove any existing y-axis label before adding a new one\n      yAxisGroup.selectAll('.y-axis-label').remove();\n\n      // Add new y-axis label\n      yAxisGroup.append('text')\n        .attr('class', 'y-axis-label')\n        .attr('transform', 'rotate(-90)')\n        .attr('y', -this.svgPadding.left + 15)\n        .attr('x', -this.svgHeight / 2) // Position in the middle of y-axis\n        .style('text-anchor', 'middle') // Center the text on its x position\n        .style('fill', 'black')\n        .style('font-size', '12px')\n        .text('Non-Renewable Energy Capacity');\n    },\n\n\n    // add country points on scatterplot\n    drawPoints(xScale, yScale) {\n      const pointsGroup = d3.select(this.$refs.pointsGroup);\n      const tooltip = d3.select(\"#tooltip\");\n      const transition = this.significantChange? d3.transition().duration(750) : d3.transition().duration(0);\n\n      const xRange = xScale.range();\n      const yRange = yScale.range();\n      const inBoundData = this.filteredData.filter(d => {\n\n        const cx = xScale(d.renewable);\n        const cy = yScale(d.nonRenewable);\n        \n\n\n        return cx >= xRange[0] && cx <= xRange[1] && cy <= yRange[0] && cy >= yRange[1];\n      });\n      pointsGroup.selectAll('.point')\n        .data(inBoundData, function(d) { return d.id; })\n        .join(\n          enter => enter.append('circle')\n                        .attr('class', 'point')\n                        .attr('cx', d => xScale(d.renewable))\n                        .attr('cy', this.svgHeight - this.svgPadding.bottom) // start from bottom\n                        .attr('r', 6) // start from zero radius\n                        .call(enter => enter.transition(transition)\n                            .attr('cy', d => yScale(d.nonRenewable))\n                            .attr('r', 6)),\n          update => update.call(update => update.transition(transition)\n                              .attr('cx', d => xScale(d.renewable))\n                              .attr('cy', d => yScale(d.nonRenewable))),\n          exit => exit.call(exit => exit.transition(transition)\n                            .attr('cy', this.svgHeight - this.svgPadding.bottom)\n                            .attr('r', 0)\n                            .remove())\n        )\n        .attr('fill', \"rgb(1, 39, 39)\")\n        .on('mouseover', function(event, d) {\n          d3.select(this)\n            .raise()\n            .attr('stroke', 'green')\n            .attr('stroke-width', 2);\n          let renewableEnergyTemp = d.renewable === 0 ? 'No Data' : d.renewable.toFixed(2);\n          let nonRenewableEnergyTemp = d.nonRenewable === 0 ? 'No Data' : d.nonRenewable.toFixed(2);\n          tooltip.transition()\n            .duration(200)\n            .style('opacity', 1);\n          tooltip.html(`\n            <table>\n              <tr><td class=\"label\">Country:</td>         <td class=\"country_value\">${d.country}</td></tr>\n              <tr><td class=\"label\">Non-Renewable Energy:</td>     <td class=\"value\">${nonRenewableEnergyTemp}</td></tr>\n              <tr><td class=\"label\">Renewable Energy:</td>        <td class=\"value\">${renewableEnergyTemp}</td></tr>\n            </table>\n          `)\n          .style('left', (event.clientX - 275) + 'px')\n          .style('top', (event.clientY - 100) + 'px');\n        })\n        .on('mouseout', function() {\n          d3.select(this)\n            .attr('r', 6)\n            .attr('stroke', 'none')\n            .attr('stroke-width', 0);\n          tooltip.transition()\n            .duration(500)\n            .style('opacity', 0);\n        })\n        \n      this.significantChange = false;\n    },\n      \n    // coloring the grid\n    // paintChart(xScale, yScale) {\n    //   xScale = xScale || this.xScale;\n    //   yScale = yScale || this.yScale;\n    //   const background = d3.select(this.$refs.gridBackground);\n    //   background.selectAll('rect').remove()\n    //   background.selectAll('#plot-area-clip-background').remove()\n    //   const colors = [\n    //     \"rgb(230, 230, 230)\",\n    //     \"rgb(220, 220, 220)\",\n    //     \"rgb(230, 230, 230)\",\n    //     \"rgb(220, 220, 220)\", \n    //     \"rgb(230, 230, 230)\", \n    //     \"rgb(220, 220, 220)\",\n    //     \"rgb(230, 230, 230)\", \n    //     \"rgb(220, 220, 220)\",\n    //     \"rgb(230, 230, 230)\",\n    //   ];\n    //   background.append(\"defs\").append(\"clipPath\")\n    //     .attr(\"id\", \"plot-area-clip-background\")\n    //     .append(\"rect\")\n    //     .attr(\"width\", this.svgWidth - this.svgPadding.left - this.svgPadding.right)\n    //     .attr(\"height\", this.svgHeight - this.svgPadding.top - this.svgPadding.bottom);\n    //   const xFirstTick = this.renewableEnergyMin + (this.renewableEnergyMax - this.renewableEnergyMin)/3;\n    //   const xSecondTick = this.renewableEnergyMin + 2*(this.renewableEnergyMax - this.renewableEnergyMin)/3;\n    //   const xValues = [this.renewableEnergyMin, xFirstTick, xSecondTick, this.renewableEnergyMax];\n    //   const yFirstTick = this.nonRenewableEnergyMin + (this.nonRenewableEnergyMax - this.nonRenewableEnergyMin)/3;\n    //   const ySecondTick = this.nonRenewableEnergyMin + 2*(this.nonRenewableEnergyMax - this.nonRenewableEnergyMin)/3;\n    //   const yValues = [this.nonRenewableEnergyMin, yFirstTick, ySecondTick,this.nonRenewableEnergyMax];\n    //   for (let i = 0; i < yValues.length - 1; i++) {\n    //     for (let j = 0; j < xValues.length - 1; j++) {\n    //       background.append('rect')\n    //         .attr('x', xScale(xValues[j]))\n    //         .attr('y', yScale(yValues[i+1]))\n    //         .attr(\"clip-path\", \"url(#plot-area-clip-background)\")\n    //         .attr('fill', colors[j + i * 3])\n    //         .attr('opacity', 0) // Start with an opacity of 0 for the transition\n    //         .attr('width', xScale(xValues[j+1]) - xScale(xValues[j]))\n    //         .attr('height', yScale(yValues[i]) - yScale(yValues[i+1]))\n    //         .attr('opacity', 1);\n    //     }\n    //   }\n    // },\n    sumEnergyCapacityByCountry(data) {\n      // Assuming each entry in `data` has a `country` field and a `capacity` field\n      const summedData = data.reduce((acc, item) => {\n        const country = item.country;\n        if (!acc[country]) {\n          acc[country] = { ...item, capacity: 0 }; // copy all properties\n        }\n        acc[country].capacity += parseFloat(item.capacity) || 0;\n        return acc;\n      }, {});\n\n      // Convert the object back into an array\n      return Object.values(summedData);\n    },\n  },\n  computed: {\n    filteredData() {\n      return this.combinedData.filter(d => d.energyCapacity !== 0 && d.energyCapacity !== 0);\n    },\n    combinedData() {\n      let totalRenewable = this.energyCapacity\n        .filter(ec => ec['energyType'] === 'Total Renewable')\n        .filter(ec => ec.id)\n        .reduce((accumulator, current) => {\n          const valueToAdd = Number(current.value) || 0;\n          if (accumulator[current.id]) {\n            accumulator[current.id].value += valueToAdd;\n          } else {\n            accumulator[current.id] = {\n              id: current.id,\n              country: current.country,\n              value: valueToAdd\n            };\n          }\n          return accumulator;\n          }, {});\n      let totalNonRenewable = this.energyCapacity\n        .filter(ec => ec['energyType'] === 'Total Non-Renewable')\n        .filter(ec => ec.id)\n        .reduce((accumulator, current) => {\n          const valueToAdd = Number(current.value) || 0;\n          if (accumulator[current.id]) {\n            accumulator[current.id].value += valueToAdd;\n          } else {\n            accumulator[current.id] = {\n              id: current.id,\n              country: current.country,\n              value: valueToAdd\n            };\n          }\n          return accumulator;\n          }, {});\n      \n      let renewableArray = Object.values(totalRenewable);\n      let nonRenewableArray = Object.values(totalNonRenewable);\n      let combined = renewableArray.map(rn => {\n        let totalNonRenewableData = nonRenewableArray.find(nr => nr.id === rn.id);\n        return {\n          id: rn.id,\n          country: rn.country,\n          renewable: rn.value,\n          nonRenewable: totalNonRenewableData? totalNonRenewableData.value: 0,\n        };\n      });\n      return combined;\n    },\n    energyCapacity: {\n      get() {\n        return this.$store.getters.energyCapacity;\n      }\n    },\n    energyGeneration: {\n      get() {\n        return this.$store.getters.energyGeneration;\n      }\n    },\n    nonRenewableEnergyMax() {\n      const maxNonRenewable = Math.max(...this.filteredData.map(d => d.nonRenewable));\n      let roundedMax;\n      if (maxNonRenewable > 1000000) {\n        roundedMax = Math.ceil(maxNonRenewable / 100000) * 100000;\n      } else if (maxNonRenewable > 100000) {\n        roundedMax = Math.ceil(maxNonRenewable / 10000) * 10000;\n      } else if (maxNonRenewable > 10000) {\n        roundedMax = Math.ceil(maxNonRenewable / 1000) * 1000;\n      } else {\n        // No rounding needed\n        roundedMax = maxNonRenewable;\n      }\n      return roundedMax;\n      // return 1300000;\n    },\n    nonRenewableEnergyMin() {\n      const minNonRenewable = Math.min(...this.filteredData.map(d => d.nonRenewable));\n      return minNonRenewable;\n    },\n    renewableEnergyMax() {\n      const maxRenewable = Math.max(...this.filteredData.map(d => d.renewable));\n      let roundedMax;\n      if (maxRenewable > 1000000) {\n        roundedMax = Math.ceil(maxRenewable / 100000) * 100000;\n      } else if (maxRenewable > 100000) {\n        roundedMax = Math.ceil(maxRenewable / 10000) * 10000;\n      } else if (maxRenewable > 10000) {\n        roundedMax = Math.ceil(maxRenewable / 1000) * 1000;\n      } else {\n        // No rounding needed\n        roundedMax = maxRenewable;\n      }\n      return roundedMax;\n      // return 700000;\n    },\n    renewableEnergyMin() {\n      const minRenewable = Math.min(...this.filteredData.map(d => d.renewable));\n      \n      return minRenewable;\n    },\n    xScale() {\n      return d3.scaleLinear()\n        .rangeRound([0, this.svgWidth - this.svgPadding.left - this.svgPadding.right])\n        .domain([this.renewableEnergyMin, this.renewableEnergyMax]);\n    },\n    yScale() {\n      return d3.scaleLinear()\n        .rangeRound([this.svgHeight - this.svgPadding.top - this.svgPadding.bottom, 0])\n        .domain([this.nonRenewableEnergyMin, this.nonRenewableEnergyMax]);\n    },\n  },\n  watch: {\n    energyCapacity: {\n      handler() {\n        let xScale = this.zoomedXScale || this.xScale;\n        let yScale = this.zoomedYScale || this.yScale;\n        this.drawChart(xScale, yScale);\n      },\n      deep: true,\n    },\n    energyGeneration: {\n      handler() {\n        let xScale = this.zoomedXScale || this.xScale;\n        let yScale = this.zoomedYScale || this.yScale;\n        this.drawChart(xScale, yScale);\n      },\n      deep: true,\n    },\n    // filteredData: {\n    //   handler() {\n    //     this.initialize();\n    //   },\n    //   deep: true,\n    // },\n    // xScale: {\n    //   handler() {\n    //     let xScale = this.zoomedXScale || this.xScale;\n    //     let yScale = this.zoomedYScale || this.yScale;\n    //     // this.paintChart(xScale, yScale);\n    //   },\n    //   deep: true,\n    // }\n  },\n}\n</script>\n\n<style>\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Scatterplot_2.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Scatterplot_2.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Scatterplot_2.vue?vue&type=template&id=6b35a4ac\"\nimport script from \"./Scatterplot_2.vue?vue&type=script&lang=js\"\nexport * from \"./Scatterplot_2.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{ref:\"chart\",staticClass:\"vis-component\"},[_c('h6',[_vm._v(\"Disasters Frequency per Country\")]),_c('svg',{attrs:{\"id\":\"bar-svg\",\"width\":_vm.svgWidth,\"height\":_vm.svgHeight},on:{\"dblclick\":_vm.resetZoom}},[_c('g',{ref:\"chartGroup\",staticClass:\"chart-group\"},[_c('g',{ref:\"brushGroup\",staticClass:\"brush-group\"}),_c('g',{ref:\"axisX\",staticClass:\"axis axis-x\"}),_c('g',{ref:\"axisY\",staticClass:\"axis axis-y\"}),_c('g',{ref:\"barsGroup\",staticClass:\"bars-group\"})])]),_c('div',{staticClass:\"tooltip\",staticStyle:{\"opacity\":\"0\"},attrs:{\"id\":\"tooltip\"}})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"vis-component\" ref=\"chart\">\n    <h6>Disasters Frequency per Country</h6>\n    <svg id=\"bar-svg\" :width=\"svgWidth\" :height=\"svgHeight\" @dblclick=\"resetZoom\" >\n      <g class=\"chart-group\" ref=\"chartGroup\">\n        <g class=\"brush-group\" ref=\"brushGroup\"></g>\n        <g class=\"axis axis-x\" ref=\"axisX\"></g>\n        <g class=\"axis axis-y\" ref=\"axisY\"></g>\n        <g class=\"bars-group\" ref=\"barsGroup\"></g>\n      </g>\n    </svg>\n    <div id=\"tooltip\" class=\"tooltip\" style=\"opacity:0;\"></div>\n  </div>\n</template>\n\n<script>\n\nimport * as d3 from 'd3';\n\nexport default {\n  name: 'BarChart',\n  props: {\n  },\n  data() {\n    const svgWidth = window.innerWidth * 4 / 12;\n    const svgHeight = window.innerHeight * 0.35;\n    return {\n      zoomedXScale: null,\n      // zoomedYScale: null,\n      svgWidth: svgWidth,\n      svgHeight: svgHeight,\n      svgPadding: {\n        top: 5, right: 20, bottom: 120, left: 100,\n      }\n      \n    }\n  },\n  mounted() {\n    this.drawChart(this.xScale);\n    this.addBrush();\n    this.initialize();\n    d3.select(\"#bar-svg\").append('g')\n      .attr('transform', 'translate(' + (this.svgWidth/2) + ','+ (this.svgHeight-10) +')')\n      .append(\"text\")\n      .text(\"Country\")\n      .style(\"font-size\", \"14px\")\n  },\n  methods: {\n    removeSelection() {\n      this.$store.commit('removeSelectedCountries');\n    },\n    initialize() {\n      var localbrushedCountries = [];\n      this.filteredData.forEach(d => localbrushedCountries.push(d.id));\n      this.$store.commit('changeBrushedCountries', localbrushedCountries);\n    },\n    resetZoom() {\n      this.zoomedXScale = null;\n      var localbrushedCountries = [];\n      this.$store.commit('changeBrushedCountries', localbrushedCountries);\n      this.initialize();\n      this.drawChart(this.xScale);\n    },\n    drawChart(xScale) {\n      if (this.$refs.chart) this.svgWidth = this.$refs.chart.clientWidth;\n      d3.select(this.$refs.chartGroup)\n        .attr('transform', `translate(${this.svgPadding.left},${this.svgPadding.top})`);\n      this.drawXAxis(xScale);\n      this.drawYAxis();\n      this.drawBars(xScale);\n    },\n    drawXAxis(xScale) {\n      const transition = d3.transition().duration(750); // Duration in milliseconds\n\n      const selectedData = this.filteredData.filter(d => this.selectedCountries.includes(d.id)).map(d => d.country);\n\n      const xAxisGroup = d3.select(this.$refs.axisX)\n        .attr('transform', `translate( 0, ${this.svgHeight - this.svgPadding.top - this.svgPadding.bottom} )`)\n        .transition(transition) // Apply transition to the axis group\n        .call(d3.axisBottom(xScale));\n\n      xAxisGroup.selectAll('text')\n        .attr('y', '7px')\n        .attr('x', '15px')\n        .style('text-anchor', 'start')\n        .attr('dx', '-.8em')\n        .attr('dy', '.15em')\n        .attr('transform', 'rotate(60)')\n        .style('font-size', '10px')\n        .attr('opacity', function(d) {\n            // Check if the country ID is in the selectedCountries array\n            let opacity = 0;\n            if (selectedData && selectedData.length !== 0) {\n              opacity = selectedData.includes(d) ? 1 : 0;\n            } else if (this.filteredData.length < 50) {\n              opacity = 1\n            } else {\n              opacity = 0\n            }\n            return opacity;\n\n        }.bind(this));\n\n      const label = d3.select(this.$refs.axisX).select('.x-axis-label');\n      if (label.empty()) {\n        d3.select(this.$refs.axisX) // Append to the main group, not the transitioning group\n          .append('text')\n          .attr('class', 'x-axis-label')\n          .attr('x', this.svgWidth / 2)\n          .attr('y', this.svgHeight *2) \n          .style('text-anchor', 'middle')\n          .style('font-size', '12px')\n          .text('Countries');\n      }\n\n    },\n    drawYAxis() {\n      d3.select(this.$refs.axisY)\n        .call(d3.axisLeft(this.yScale))\n        .style('font-size', '10px')\n        .append('text')\n        .attr('transform', 'rotate(-90)')\n        .attr('x', -this.svgHeight/2 + this.svgPadding.top + this.svgPadding.bottom - 30)\n        .attr('y', -this.svgPadding.left +55)\n        .attr('dy', '0.71em')\n        .attr('text-anchor', 'end')\n        .attr('fill', 'black')\n        .style('font-size', '12px')\n        .text(\"Disaster Frequency\");\n    },\n    drawBars(xScale) {\n      const barsGroup = d3.select(this.$refs.barsGroup);\n      const tooltip = d3.select(\"#tooltip\");\n      const transition = d3.transition().duration(750);\n\n      // Filter the data to only include brushed countries\n      const brushedData = this.brushedCountries.length\n        ? this.filteredData.filter(d => this.brushedCountries.includes(d.id))\n        : this.filteredData;\n\n      barsGroup.selectAll('.bar')\n        .data(brushedData, function(d) { return d.id; })\n        .join(\n          enter => enter.append('rect')\n            .attr('class', 'bar')\n            .attr('x', (d) => xScale(d.country))\n            .attr('width', xScale.bandwidth())\n            .attr('y', this.svgHeight - this.svgPadding.top - this.svgPadding.bottom) // Start from bottom\n            .attr('height', 0) \n            .call(enter => enter.transition(transition) // Transition on enter\n              .attr('y', (d) => this.yScale(d.value))\n              .attr('height', (d) => this.svgHeight - this.svgPadding.top - this.svgPadding.bottom - this.yScale(d.value))),\n          update => update.call(update => update.transition(transition) // Transition on update\n            .attr('x', (d) => xScale(d.country))\n            .attr('width', xScale.bandwidth())\n            .attr('y', (d) => this.yScale(d.value))\n            .attr('height', (d) => this.svgHeight - this.svgPadding.top - this.svgPadding.bottom - this.yScale(d.value))),\n          exit => exit.call(exit => exit.transition(transition) // Transition on exit\n            .attr('y', this.svgHeight - this.svgPadding.top - this.svgPadding.bottom)\n            .attr('height', 0)\n            .remove())\n        )\n        .attr('fill', d => {\n          const countryData = this.filteredData.find(s => s.id === d.id);\n          const isSelected = this.selectedCountries.includes(d.id);\n          if (countryData.country) {\n            if (isSelected) {\n              if (this.brushedCountries.includes(countryData.id)) {\n                return 'rgb(253, 255, 181)';\n              } else {\n                return 'rgb(150, 150, 150)';\n              }\n            } else {\n              if (this.brushedCountries.includes(countryData.id)) {\n                return this.getColorForCountry(countryData);\n              } else {\n                return 'rgb(130, 130, 130)';\n              }\n            }\n          } else {\n            return 'darkgrey';\n          }\n        })\n        .on('click', (event, d) => this.handleBarClick(d.id))\n        .on('mouseover', (event, d) => {\n          let landCoverTemp;\n          let carbonStocksTemp;\n          let disastersFreqTemp;\n          const hoveringLandCover = this.landCover.find(country => country.id === d.id);\n          const hoveringCarbonStocks = this.carbonStocks.find(country => country.id === d.id);\n          const hoveringDisasters = this.disastersFreq.find(country => country.id === d.id)\n          if (hoveringLandCover) {\n            landCoverTemp = hoveringLandCover.value === 0 ? 'No Data' : hoveringLandCover.value.toFixed(4);\n          } else {\n            landCoverTemp = 'No Data';\n          }\n          if (hoveringCarbonStocks) {\n            carbonStocksTemp = hoveringCarbonStocks.value === 0 ? 'No Data' : hoveringCarbonStocks.value.toFixed(4);\n          } else {\n            carbonStocksTemp = 'No Data';\n          }\n          if (hoveringDisasters) {\n            disastersFreqTemp = hoveringDisasters.value === -1 ? 'No Data' : hoveringDisasters.value;\n          } else {\n            disastersFreqTemp = 'No Data';\n          }\n          tooltip.transition()\n            .duration(200)\n            .style('opacity', 1);\n\n\n          tooltip.html(`\n            <table>\n              <tr><td class=\"label\">Country:</td>         <td class=\"value\">${d.country}</td></tr>\n              <tr><td class=\"label\">CarbonStocks:</td>        <td class=\"value\">${carbonStocksTemp}</td></tr>\n              <tr><td class=\"label\">LandCoverIndex:</td>     <td class=\"value\">${landCoverTemp}</td></tr>\n              <tr><td class=\"label\">disastersFreq:</td>     <td class=\"value\">${disastersFreqTemp}</td></tr>\n            </table>\n          `)\n            .style('left', (event.clientX - 275) + 'px')\n            .style('top', (event.clientY - 400) + 'px');\n        })\n        .on('mouseout', () => {\n          tooltip.transition().duration(500).style('opacity', 0);\n          \n        });\n    },\n\n    handleBarClick(countryId) {\n      const isSelected = this.selectedCountries.includes(countryId);\n      if (!isSelected) {\n        this.$store.commit('changeSelectedCountries', countryId);\n      } else {\n        this.$store.commit('removeSelectedCountry', countryId);\n      }\n    },\n    getColorForCountry(countryData) {\n      const colors = [\n        \"rgb(230, 230, 230)\",\n        \"rgb(220, 183, 210)\", // 0 1 \n        \"rgb(211, 146, 194)\", // 0 0 \n        \"rgb(195, 238, 199)\", // 1 2 \n        \"rgb(151, 185, 199)\", \n        \"rgb(168, 140, 191)\", // 1 0 \n        \"rgb(148, 221, 166)\", // 2 2 \n        \"rgb(129, 186, 162)\", // 2 1 \n        \"rgb(107, 120, 155)\",\n      ];\n      const landCoverData = this.landCover.find(country => country.id === countryData.id);\n      const carbonStocksData = this.carbonStocks.find(country => country.id === countryData.id);\n      if (!landCoverData || !carbonStocksData) {\n        // Handle the case where data is not available for the country\n        return 'darkgrey';\n      }\n      let landCoverCategory = this.getLandCoverCategory(landCoverData.value);\n      let carbonStocksCategory = this.getCarbonStocksCategory(carbonStocksData.value);\n\n      if (carbonStocksCategory === 'low' && landCoverCategory === 'low') return colors[0];\n      if (carbonStocksCategory === 'low' && landCoverCategory === 'medium') return colors[1];\n      if (carbonStocksCategory === 'low' && landCoverCategory === 'high') return colors[2];\n      if (carbonStocksCategory === 'medium' && landCoverCategory === 'low') return colors[3];\n      if (carbonStocksCategory === 'medium' && landCoverCategory === 'medium') return colors[4];\n      if (carbonStocksCategory === 'medium' && landCoverCategory === 'high') return colors[5];\n      if (carbonStocksCategory === 'high' && landCoverCategory === 'low') return colors[6];\n      if (carbonStocksCategory === 'high' && landCoverCategory === 'medium') return colors[7];\n      if (carbonStocksCategory === 'high' && landCoverCategory === 'high') return colors[8];\n    },\n    getLandCoverCategory(landCover) {\n      const xFirstTick = this.landCoverMin + (this.landCoverMax - this.landCoverMin) / 3;\n      const xSecondTick = this.landCoverMin + 2 * (this.landCoverMax - this.landCoverMin) / 3;\n      const xThresholds = [xFirstTick, xSecondTick];\n      if (landCover <= xThresholds[0]) return 'low';\n      if (landCover <= xThresholds[1]) return 'medium';\n      return 'high';\n    },\n\n    getCarbonStocksCategory(carbonStocks) {\n      const yFirstTick = this.carbonStocksMin + (this.carbonStocksMax - this.carbonStocksMin) / 3;\n      const ySecondTick = this.carbonStocksMin + 2 * (this.carbonStocksMax - this.carbonStocksMin) / 3;\n      const yThresholds = [yFirstTick, ySecondTick];\n      if (carbonStocks <= yThresholds[0]) return 'low';\n      if (carbonStocks <= yThresholds[1]) return 'medium';\n      return 'high';\n    },\n\n    addBrush() {\n      this.brush = d3.brushX()\n        .extent([[0,0], [this.svgWidth - this.svgPadding.left - this.svgPadding.right, \n          this.svgHeight - this.svgPadding.bottom - this.svgPadding.top]])\n        .on('end', this.onBrush);\n      \n      d3.select(this.$refs.brushGroup)\n        .attr('class', 'brush')\n        .call(this.brush);\n    },\n    // get states in brush\n    onBrush(event) {\n      var selection = event.selection;\n      var brushedIds = [];\n      var xScale;\n      if (this.zoomedXScale) {\n        xScale = this.zoomedXScale;\n      } else {\n        xScale = this.xScale\n      }\n\n      if (selection) {\n        const [x0, x1] = selection;\n        \n        // Filter the data based on the brushed selection\n        brushedIds = this.filteredData\n          .filter(d => {\n            const x = xScale(d.country);\n            return x >= x0 && x <= x1;\n          })\n          .map(d => d.id);\n      }\n      this.drawBars(xScale); // Redraw bars with updated data\n        \n      var idleTimeout;\n      if (!selection) {\n        if (!idleTimeout) return idleTimeout = setTimeout(() => {\n          idleTimeout = null\n        }, 1) \n      }\n      d3.select('#bar-svg').select(\".brush\").call(this.brush.move, null)\n\n      this.$store.commit('changeBrushedCountries', brushedIds);\n    },\n    \n  },\n  computed: {\n    \n    filteredData() {\n      let filtered = this.disastersFreq.filter(d => d.value > 0);\n      if (this.brushedCountries.length > 0) {\n        filtered = filtered.filter(d => this.brushedCountries.includes(d.id));\n      }\n      filtered.sort((a, b) => d3.descending(+a.value, +b.value));\n      return filtered;\n    },\n    landCover: {\n      get() {\n        return this.$store.getters.landCover;\n      }\n    },\n    carbonStocks: {\n      get() {\n        return this.$store.getters.carbonStocks;\n      }\n    },\n    disastersFreq: {\n      get() {\n        return this.$store.getters.disastersFreq;\n      }\n    },\n    dataMax() {\n      return 40;\n    },\n    dataMin() {\n      return 0;\n    },\n    carbonStocksMax() {\n      return 200;\n    },\n    carbonStocksMin() {\n      return 0;\n    },\n    landCoverMax() {\n      return 130;\n    },\n    landCoverMin() {\n      return 70;\n    },\n    xScale() {\n      return d3.scaleBand()\n        .rangeRound([0, this.svgWidth - this.svgPadding.left - this.svgPadding.right]).padding(0.15)\n        .domain(this.filteredData.map((d) => d.country));\n    },\n    yScale() {\n      return d3.scaleLinear()\n        .rangeRound([this.svgHeight - this.svgPadding.top - this.svgPadding.bottom, 0])\n        .domain([this.dataMin > 0 ? 0 : this.dataMin, this.dataMax]);\n    },\n    selectedCountries: {\n      get() {\n        return this.$store.getters.selectedCountries;\n      }\n    },\n    brushedCountries: {\n      get() {\n        return this.$store.getters.brushedCountries;\n      }\n    },\n  },\n  watch: {\n    landCover: {\n      handler() {\n        this.drawChart(this.xScale);\n      },\n      deep: true,\n    },\n    carbonStocks: {\n      handler() {\n        this.drawChart(this.xScale);\n      },\n      deep: true,\n    },\n    disastersFreq: {\n      handler() {\n        this.drawChart(this.xScale);\n      },\n      deep: true,\n    },\n    brushedCountries: {\n      handler() {\n        this.drawChart(this.xScale);\n      },\n      deep: true,\n    },\n    selectedCountries: {\n      handler() {\n        if (this.zoomedXScale) {\n          this.drawChart(this.zoomedXScale);\n        } else {\n          this.drawChart(this.xScale);\n        }\n      },\n      deep: true,\n    }\n  },\n}\n</script>\n\n<style>\n\n.bar:hover {\n  border-width: 1;\n  border-color: rgb(253, 255, 181);\n  opacity: 0.7;\n}\n\n\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BarChart.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BarChart.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./BarChart.vue?vue&type=template&id=d9a9ce40\"\nimport script from \"./BarChart.vue?vue&type=script&lang=js\"\nexport * from \"./BarChart.vue?vue&type=script&lang=js\"\nimport style0 from \"./BarChart.vue?vue&type=style&index=0&id=d9a9ce40&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\n  \n  <div id=\"app\">\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <h5>Mitigation and Disaster Relief Project Identification: (Data for 1992 - 2020)</h5>\n        </div>\n      </div>\n      \n      <div class=\"row\">\n        <div class=\"col-md-2\"></div>\n        <div class=\"col-md-8\">\n          <YearSlider/>\n        </div>\n        <div class=\"col-md-2\"></div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-1\">\n        </div>\n        <div class=\"col-md-5 border-container\">\n          <ChoroplethMap/>\n        </div>\n        <div class=\"col-md-5 border-container\">\n          <Scatterplot_1/>\n        </div>\n        <div class=\"col-md-1\">\n        </div>\n      </div>\n      <div class=\"row\"><br></div>\n      <div class=\"row\">\n        <!-- <div class=\"col-md-1\"></div> -->\n        <div class=\"col-md-12\">\n          \n        </div>\n        <!-- <div class=\"col-md-1\"></div> -->\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-1\">\n        </div>\n        <div class=\"col-md-5 energy-container\">\n          <Scatterplot_2/>\n        </div>\n       \n        <div class=\"col-md-5 border-container\">\n          <BarChart/>\n        </div>\n        <div class=\"col-md-1\">\n        </div>\n      </div>\n    \n    </div>\n  </div>\n</template>\n\n<script>\n// Hint: Replace 'BarChart' in this file with the Scatterplot\nimport ChoroplethMap from './components/ChoroplethMap.vue';\nimport YearSlider from './components/YearSlider.vue';\nimport Scatterplot_1 from './components/Scatterplot_1.vue';\nimport Scatterplot_2 from './components/Scatterplot_2.vue';\nimport BarChart from './components/BarChart.vue';\n// import StackedBarChart from './components/StackedBarChart.vue';\nexport default {\n  name: 'App',\n  components: {\n    ChoroplethMap, YearSlider, Scatterplot_1, Scatterplot_2, BarChart\n  },\n  mounted() {\n    this.$store.dispatch('loadData');\n    this.$store.dispatch('loadEnergyData')\n  },\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #000000;\n  margin-top: 0px;\n  background-color: #ebebeb;\n  min-height: 100vh;\n}\n\n.energy-container {\n  background-color: #f3f3f3;\n  border: 7px solid #f3f3f3;\n  padding: 5px;\n}\n</style>\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--13-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--1-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--13-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--1-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=1bec3598\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\nimport style0 from \"./App.vue?vue&type=style&index=0&id=1bec3598&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue';\nimport Vuex from 'vuex';\nimport * as d3 from 'd3';\n\nVue.use(Vuex);\n\nconst store = new Vuex.Store({\n  state: {\n    selectedYear: 2018,\n    selectedCountries: [],\n    brushedCountries: [],\n    disastersFreq: [],\n    carbonStocks: [],\n    landCover: [],\n    energy: [],\n    energyGeneration: [],\n    energyCapacity: [],\n  },\n  mutations: {\n    changeSelectedYear (state, year) {\n      state.selectedYear = year;\n    },\n    changeSelectedCountries(state, val) {\n      state.selectedCountries.push(val);\n    },\n    removeSelectedCountries(state) {\n      state.selectedCountries = [];\n    },\n    changeBrushedCountries(state, val) {\n      state.brushedCountries = val;\n    },\n    removeSelectedCountry(state, val) {\n      state.selectedCountries = state.selectedCountries.filter(id => id !== val);\n    },\n  },\n  getters: {\n    selectedYear: (state) => state.selectedYear,\n    selectedCountries: (state) => state.selectedCountries,\n    brushedCountries: (state) => state.brushedCountries,\n    disastersFreq: (state) => filterDataBySelectedYear(state.disastersFreq, state.selectedYear),\n    carbonStocks: (state) => filterDataBySelectedYear(state.carbonStocks, state.selectedYear),\n    landCover: (state) => filterDataBySelectedYear(state.landCover, state.selectedYear),\n    energy: (state) => filterEnergyDataByYear(state.energy, state.selectedYear),\n    energyGeneration: (state) => filterEnergyDataByYear(state.energyGeneration, state.selectedYear),\n    energyCapacity: (state) => filterEnergyDataByYear(state.energyCapacity, state.selectedYear),\n  },\n  actions: {\n    loadData({state}) {\n      d3.csv('./27_Climate-related_Disasters_Frequency.csv').then((data) => { \n        state.disastersFreq = data;\n      })\n\n      d3.csv('./26_Forest_and_Carbon.csv').then((data) => { \n        state.carbonStocks = data;\n      })\n\n      d3.csv('./25_Land_Cover_Accounts.csv').then((data) => { \n        state.landCover = data;\n      })\n    },\n\n    loadEnergyData({state}) {\n      d3.csv('./5_Energy_Transition.csv').then((data) => {\n\n        const energyGeneration = data.filter(item => item['Indicator'] === 'Electricity Generation');\n        const energyCapacity = data.filter(item => item['Indicator'] === 'Electricity Installed Capacity');\n        state.energy = data;\n        state.energyGeneration = energyGeneration;\n        state.energyCapacity = energyCapacity;\n      })\n    },\n\n  }\n})\n\nfunction filterDataBySelectedYear(data, selectedYear) {\n  if (selectedYear < 1992) {\n    selectedYear = 1992\n  } else if (selectedYear > 2020) {\n    selectedYear = 2020\n  }\n  let result = data\n                  .filter(item => selectedYear in item)\n                  .map(item => ({\n                    country: item.Country,\n                    id: item.ISO2,\n                    value: +item[selectedYear],\n                  }))\n  return result;\n}\n\nfunction filterEnergyDataByYear(data, selectedYear) {\n  if (selectedYear < 2000) {\n    selectedYear = 2000\n  } else if (selectedYear > 2022) {\n    selectedYear = 2022\n  }\n  let result = data\n                  .filter(item => selectedYear in item)\n                  .map(item => ({\n                    country: item.Country,\n                    id: item.ISO2,\n                    energyType: item['Energy Type'],\n                    technology: item.Technology,\n                    value: +item[selectedYear]\n                  }))\n    return result;\n}\n\nexport default store;\n","import Vue from 'vue';\nimport { BootstrapVue, IconsPlugin } from 'bootstrap-vue';\nimport App from './App.vue';\nimport store from './store/store';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap-vue/dist/bootstrap-vue.css';\n\nVue.use(BootstrapVue);\nVue.use(IconsPlugin);\n\nVue.config.productionTip = false;\n\nnew Vue({\n  store,\n  render: h => h(App),\n}).$mount('#app');","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BarChart.vue?vue&type=style&index=0&id=d9a9ce40&prod&lang=css\"","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--1-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&id=1bec3598&prod&lang=css\""],"sourceRoot":""}