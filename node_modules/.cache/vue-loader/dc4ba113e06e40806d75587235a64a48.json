{"remainingRequest":"/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/src/components/Scatterplot_2.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/src/components/Scatterplot_2.vue","mtime":1705768152791},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/node_modules/cache-loader/dist/cjs.js","mtime":1705744300535},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/node_modules/thread-loader/dist/cjs.js","mtime":1705744300535},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/node_modules/babel-loader/lib/index.js","mtime":1705744300565},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/node_modules/cache-loader/dist/cjs.js","mtime":1705744300535},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/node_modules/vue-loader/lib/index.js","mtime":1705744299123}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Scatterplot_2.vue"],"names":[],"mappings":";;AAmfile":"Scatterplot_2.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"vis-component\" ref=\"chart\">\n    <h6><h5>Renewable Energy Transition Project Identification: (Data for 2000 - 2022)</h5></h6>\n    <svg id=\"scatter2-svg\" :width=\"svgWidth\" :height=\"svgHeight\" @dblclick=\"resetZoom\">\n      <g class=\"chart-group\" ref=\"chartGroup\">\n        <g class=\"grid-background\" ref=\"gridBackground\"></g>\n        <g class=\"brush-group\" ref=\"brushGroup\"></g>\n        <g class=\"axis axis-x\" ref=\"axisX\"></g>\n        <g class=\"axis axis-y\" ref=\"axisY\"></g>\n        <g class=\"points-group\" ref=\"pointsGroup\"></g>\n      </g>\n    </svg>\n    \n    <div id=\"tooltip\" class=\"tooltip\" style=\"opacity:0;\"></div>\n  </div>\n</template>\n\n<script>\n\nimport * as d3 from 'd3';\n\nexport default {\n  name: 'Scatterplot_1',\n  props: {\n  },\n  data() {\n    const svgWidth = window.innerWidth * 4 / 12;\n    const svgHeight = window.innerHeight * 0.35;\n    return {\n      zoomedXScale: null,\n      zoomedYScale: null,\n      svgWidth: svgWidth,\n      svgHeight: svgHeight,\n      svgPadding: {\n        top: 5, right: 15, bottom: 60, left: 60,\n      },\n      significantChange: false,\n    }\n  },\n  mounted() {\n    this.drawChart(this.xScale, this.yScale);\n    this.addBrush();\n    this.initialize();\n    // this.paintChart(this.xScale, this.yScale);\n\n  },\n  methods: {\n    initialize() {\n      var localbrushedCountries = [];\n      this.filteredData.forEach(d => localbrushedCountries.push(d.id));\n    },\n    resetZoom() {\n      this.zoomedXScale = null;\n      this.zoomedYScale = null;\n      // this.paintChart(this.xScale, this.yScale);\n      this.drawChart(this.xScale, this.yScale);\n      this.initialize()\n    },\n    // called for each updage\n    drawChart(xScale, yScale) {\n      xScale = xScale || this.xScale;\n      yScale = yScale || this.yScale;\n\n      // Update axes\n      this.drawXAxis(xScale);\n      this.drawYAxis(yScale);\n      \n      d3.select(this.$refs.chartGroup)\n        .attr('transform', `translate(${this.svgPadding.left},${this.svgPadding.top})`);\n      this.drawPoints(xScale, yScale);\n      // this.paintChart(xScale, yScale);\n    },\n    // brush for showing on choroplethmap\n    addBrush() {\n      this.brush = d3.brush()\n        .extent([[0,0], [this.svgWidth - this.svgPadding.left - this.svgPadding.right, \n          this.svgHeight - this.svgPadding.bottom - this.svgPadding.top]])\n        .on('end', this.onBrush);\n      \n      d3.select(this.$refs.brushGroup)\n        .attr('class', 'brush')\n        .call(this.brush);\n    },\n    // get states in brush\n    onBrush(event) {\n      this.significantChange = true;\n      var selection = event.selection;\n      var localbrushedCountries = [];\n      var x0,x1,y0,y1,idleTimeout;\n      if (!selection) {\n        // Reset zoom and clear brushed countries\n        this.filteredData.forEach(d => localbrushedCountries.push(d.id));\n        if (!idleTimeout) return idleTimeout = setTimeout(() => {\n          idleTimeout = null\n        }, 1)    \n      } else {\n        // Calculate new scales for zoom\n        if (this.zoomedXScale) {\n          x0 = this.zoomedXScale.invert(selection[0][0]);\n          x1 = this.zoomedXScale.invert(selection[1][0]);\n          y0 = this.zoomedYScale.invert(selection[1][1]);\n          y1 = this.zoomedYScale.invert(selection[0][1]);\n        } else {\n          x0 = this.xScale.invert(selection[0][0]);\n          x1 = this.xScale.invert(selection[1][0]);\n          y0 = this.yScale.invert(selection[1][1]);\n          y1 = this.yScale.invert(selection[0][1]);\n        }\n\n        this.zoomedXScale = d3.scaleLinear().domain([x0, x1]).range([0, this.svgWidth - this.svgPadding.left - this.svgPadding.right]);\n        this.zoomedYScale = d3.scaleLinear().domain([y0, y1]).range([this.svgHeight - this.svgPadding.top - this.svgPadding.bottom, 0]);\n\n        this.drawChart(this.zoomedXScale, this.zoomedYScale);\n\n        this.filteredData.forEach(d => {\n          if (d.energyGeneration >= y0 && d.energyGeneration <= y1 && d.energyCapacity >= x0 && d.energyCapacity <= x1) {\n            localbrushedCountries.push(d.id);\n          }\n        });\n        \n      }\n\n      // this.paintChart(this.zoomedXScale, this.zoomedYScale);\n\n      d3.select('#scatter2-svg').select(\".brush\").call(this.brush.move, null);\n    },\n    drawXAxis(xScale) {\n      const xAxisGroup = d3.select(this.$refs.axisX)\n        .attr('transform', `translate(0, ${this.svgHeight - this.svgPadding.top - this.svgPadding.bottom})`)\n        .call(d3.axisBottom(xScale));\n\n      // Rotate the ticks\n      xAxisGroup.selectAll(\".tick text\")\n      .attr(\"transform\", \"rotate(50)\")\n      .attr(\"x\", 9)\n      .attr(\"y\", 0)\n      .style(\"text-anchor\", \"start\");\n\n      // Position the axis label\n      xAxisGroup.append('text')\n      .attr('class', 'x-axis-label')\n      .attr('x', this.svgWidth / 2)\n      .attr('y', this.svgPadding.bottom - 5)\n\n      \n      .style('text-anchor', 'middle')\n      .style('fill', 'black')\n      .style('font-size', '12px')\n      .text('Renewable Energy Capacity');\n    },\n    drawYAxis(yScale) {\n      const yAxisGroup = d3.select(this.$refs.axisY)\n        .attr('transform', `translate(0, 0)`)\n        .call(d3.axisLeft(yScale))\n        .style('font-size', '10px');\n\n      // Rotate the ticks\n      yAxisGroup.selectAll('.tick text')\n        .attr('transform', 'rotate(-50)')\n        .style('text-anchor', 'end');\n\n      // Remove any existing y-axis label before adding a new one\n      yAxisGroup.selectAll('.y-axis-label').remove();\n\n      // Add new y-axis label\n      yAxisGroup.append('text')\n        .attr('class', 'y-axis-label')\n        .attr('transform', 'rotate(-90)')\n        .attr('y', -this.svgPadding.left + 15)\n        .attr('x', -this.svgHeight / 2) // Position in the middle of y-axis\n        .style('text-anchor', 'middle') // Center the text on its x position\n        .style('fill', 'black')\n        .style('font-size', '12px')\n        .text('Non-Renewable Energy Capacity');\n    },\n\n\n    // add country points on scatterplot\n    drawPoints(xScale, yScale) {\n      const pointsGroup = d3.select(this.$refs.pointsGroup);\n      const tooltip = d3.select(\"#tooltip\");\n      const transition = this.significantChange? d3.transition().duration(750) : d3.transition().duration(0);\n\n      const xRange = xScale.range();\n      const yRange = yScale.range();\n      const inBoundData = this.filteredData.filter(d => {\n\n        const cx = xScale(d.renewable);\n        const cy = yScale(d.nonRenewable);\n        \n\n\n        return cx >= xRange[0] && cx <= xRange[1] && cy <= yRange[0] && cy >= yRange[1];\n      });\n      pointsGroup.selectAll('.point')\n        .data(inBoundData, function(d) { return d.id; })\n        .join(\n          enter => enter.append('circle')\n                        .attr('class', 'point')\n                        .attr('cx', d => xScale(d.renewable))\n                        .attr('cy', this.svgHeight - this.svgPadding.bottom) // start from bottom\n                        .attr('r', 6) // start from zero radius\n                        .call(enter => enter.transition(transition)\n                            .attr('cy', d => yScale(d.nonRenewable))\n                            .attr('r', 6)),\n          update => update.call(update => update.transition(transition)\n                              .attr('cx', d => xScale(d.renewable))\n                              .attr('cy', d => yScale(d.nonRenewable))),\n          exit => exit.call(exit => exit.transition(transition)\n                            .attr('cy', this.svgHeight - this.svgPadding.bottom)\n                            .attr('r', 0)\n                            .remove())\n        )\n        .attr('fill', \"rgb(1, 39, 39)\")\n        .on('mouseover', function(event, d) {\n          d3.select(this)\n            .raise()\n            .attr('stroke', 'green')\n            .attr('stroke-width', 2);\n          let renewableEnergyTemp = d.renewable === 0 ? 'No Data' : d.renewable.toFixed(2);\n          let nonRenewableEnergyTemp = d.nonRenewable === 0 ? 'No Data' : d.nonRenewable.toFixed(2);\n          tooltip.transition()\n            .duration(200)\n            .style('opacity', 1);\n          tooltip.html(`\n            <table>\n              <tr><td class=\"label\">Country:</td>         <td class=\"country_value\">${d.country}</td></tr>\n              <tr><td class=\"label\">Non-Renewable Energy:</td>     <td class=\"value\">${nonRenewableEnergyTemp}</td></tr>\n              <tr><td class=\"label\">Renewable Energy:</td>        <td class=\"value\">${renewableEnergyTemp}</td></tr>\n            </table>\n          `)\n          .style('left', (event.clientX - 275) + 'px')\n          .style('top', (event.clientY - 100) + 'px');\n        })\n        .on('mouseout', function() {\n          d3.select(this)\n            .attr('r', 6)\n            .attr('stroke', 'none')\n            .attr('stroke-width', 0);\n          tooltip.transition()\n            .duration(500)\n            .style('opacity', 0);\n        })\n        \n      this.significantChange = false;\n    },\n      \n    // coloring the grid\n    // paintChart(xScale, yScale) {\n    //   xScale = xScale || this.xScale;\n    //   yScale = yScale || this.yScale;\n    //   const background = d3.select(this.$refs.gridBackground);\n    //   background.selectAll('rect').remove()\n    //   background.selectAll('#plot-area-clip-background').remove()\n    //   const colors = [\n    //     \"rgb(230, 230, 230)\",\n    //     \"rgb(220, 220, 220)\",\n    //     \"rgb(230, 230, 230)\",\n    //     \"rgb(220, 220, 220)\", \n    //     \"rgb(230, 230, 230)\", \n    //     \"rgb(220, 220, 220)\",\n    //     \"rgb(230, 230, 230)\", \n    //     \"rgb(220, 220, 220)\",\n    //     \"rgb(230, 230, 230)\",\n    //   ];\n    //   background.append(\"defs\").append(\"clipPath\")\n    //     .attr(\"id\", \"plot-area-clip-background\")\n    //     .append(\"rect\")\n    //     .attr(\"width\", this.svgWidth - this.svgPadding.left - this.svgPadding.right)\n    //     .attr(\"height\", this.svgHeight - this.svgPadding.top - this.svgPadding.bottom);\n    //   const xFirstTick = this.renewableEnergyMin + (this.renewableEnergyMax - this.renewableEnergyMin)/3;\n    //   const xSecondTick = this.renewableEnergyMin + 2*(this.renewableEnergyMax - this.renewableEnergyMin)/3;\n    //   const xValues = [this.renewableEnergyMin, xFirstTick, xSecondTick, this.renewableEnergyMax];\n    //   const yFirstTick = this.nonRenewableEnergyMin + (this.nonRenewableEnergyMax - this.nonRenewableEnergyMin)/3;\n    //   const ySecondTick = this.nonRenewableEnergyMin + 2*(this.nonRenewableEnergyMax - this.nonRenewableEnergyMin)/3;\n    //   const yValues = [this.nonRenewableEnergyMin, yFirstTick, ySecondTick,this.nonRenewableEnergyMax];\n    //   for (let i = 0; i < yValues.length - 1; i++) {\n    //     for (let j = 0; j < xValues.length - 1; j++) {\n    //       background.append('rect')\n    //         .attr('x', xScale(xValues[j]))\n    //         .attr('y', yScale(yValues[i+1]))\n    //         .attr(\"clip-path\", \"url(#plot-area-clip-background)\")\n    //         .attr('fill', colors[j + i * 3])\n    //         .attr('opacity', 0) // Start with an opacity of 0 for the transition\n    //         .attr('width', xScale(xValues[j+1]) - xScale(xValues[j]))\n    //         .attr('height', yScale(yValues[i]) - yScale(yValues[i+1]))\n    //         .attr('opacity', 1);\n    //     }\n    //   }\n    // },\n    sumEnergyCapacityByCountry(data) {\n      // Assuming each entry in `data` has a `country` field and a `capacity` field\n      const summedData = data.reduce((acc, item) => {\n        const country = item.country;\n        if (!acc[country]) {\n          acc[country] = { ...item, capacity: 0 }; // copy all properties\n        }\n        acc[country].capacity += parseFloat(item.capacity) || 0;\n        return acc;\n      }, {});\n\n      // Convert the object back into an array\n      return Object.values(summedData);\n    },\n  },\n  computed: {\n    filteredData() {\n      return this.combinedData.filter(d => d.energyCapacity !== 0 && d.energyCapacity !== 0);\n    },\n    combinedData() {\n      let totalRenewable = this.energyCapacity\n        .filter(ec => ec['energyType'] === 'Total Renewable')\n        .filter(ec => ec.id)\n        .reduce((accumulator, current) => {\n          const valueToAdd = Number(current.value) || 0;\n          if (accumulator[current.id]) {\n            accumulator[current.id].value += valueToAdd;\n          } else {\n            accumulator[current.id] = {\n              id: current.id,\n              country: current.country,\n              value: valueToAdd\n            };\n          }\n          return accumulator;\n          }, {});\n      let totalNonRenewable = this.energyCapacity\n        .filter(ec => ec['energyType'] === 'Total Non-Renewable')\n        .filter(ec => ec.id)\n        .reduce((accumulator, current) => {\n          const valueToAdd = Number(current.value) || 0;\n          if (accumulator[current.id]) {\n            accumulator[current.id].value += valueToAdd;\n          } else {\n            accumulator[current.id] = {\n              id: current.id,\n              country: current.country,\n              value: valueToAdd\n            };\n          }\n          return accumulator;\n          }, {});\n      \n      let renewableArray = Object.values(totalRenewable);\n      let nonRenewableArray = Object.values(totalNonRenewable);\n      let combined = renewableArray.map(rn => {\n        let totalNonRenewableData = nonRenewableArray.find(nr => nr.id === rn.id);\n        return {\n          id: rn.id,\n          country: rn.country,\n          renewable: rn.value,\n          nonRenewable: totalNonRenewableData? totalNonRenewableData.value: 0,\n        };\n      });\n      return combined;\n    },\n    energyCapacity: {\n      get() {\n        return this.$store.getters.energyCapacity;\n      }\n    },\n    energyGeneration: {\n      get() {\n        return this.$store.getters.energyGeneration;\n      }\n    },\n    nonRenewableEnergyMax() {\n      const maxNonRenewable = Math.max(...this.filteredData.map(d => d.nonRenewable));\n      let roundedMax;\n      if (maxNonRenewable > 1000000) {\n        roundedMax = Math.ceil(maxNonRenewable / 100000) * 100000;\n      } else if (maxNonRenewable > 100000) {\n        roundedMax = Math.ceil(maxNonRenewable / 10000) * 10000;\n      } else if (maxNonRenewable > 10000) {\n        roundedMax = Math.ceil(maxNonRenewable / 1000) * 1000;\n      } else {\n        // No rounding needed\n        roundedMax = maxNonRenewable;\n      }\n      return roundedMax;\n      // return 1300000;\n    },\n    nonRenewableEnergyMin() {\n      const minNonRenewable = Math.min(...this.filteredData.map(d => d.nonRenewable));\n      return minNonRenewable;\n    },\n    renewableEnergyMax() {\n      const maxRenewable = Math.max(...this.filteredData.map(d => d.renewable));\n      let roundedMax;\n      if (maxRenewable > 1000000) {\n        roundedMax = Math.ceil(maxRenewable / 100000) * 100000;\n      } else if (maxRenewable > 100000) {\n        roundedMax = Math.ceil(maxRenewable / 10000) * 10000;\n      } else if (maxRenewable > 10000) {\n        roundedMax = Math.ceil(maxRenewable / 1000) * 1000;\n      } else {\n        // No rounding needed\n        roundedMax = maxRenewable;\n      }\n      return roundedMax;\n      // return 700000;\n    },\n    renewableEnergyMin() {\n      const minRenewable = Math.min(...this.filteredData.map(d => d.renewable));\n      \n      return minRenewable;\n    },\n    xScale() {\n      return d3.scaleLinear()\n        .rangeRound([0, this.svgWidth - this.svgPadding.left - this.svgPadding.right])\n        .domain([this.renewableEnergyMin, this.renewableEnergyMax]);\n    },\n    yScale() {\n      return d3.scaleLinear()\n        .rangeRound([this.svgHeight - this.svgPadding.top - this.svgPadding.bottom, 0])\n        .domain([this.nonRenewableEnergyMin, this.nonRenewableEnergyMax]);\n    },\n  },\n  watch: {\n    energyCapacity: {\n      handler() {\n        let xScale = this.zoomedXScale || this.xScale;\n        let yScale = this.zoomedYScale || this.yScale;\n        this.drawChart(xScale, yScale);\n      },\n      deep: true,\n    },\n    energyGeneration: {\n      handler() {\n        let xScale = this.zoomedXScale || this.xScale;\n        let yScale = this.zoomedYScale || this.yScale;\n        this.drawChart(xScale, yScale);\n      },\n      deep: true,\n    },\n    // filteredData: {\n    //   handler() {\n    //     this.initialize();\n    //   },\n    //   deep: true,\n    // },\n    // xScale: {\n    //   handler() {\n    //     let xScale = this.zoomedXScale || this.xScale;\n    //     let yScale = this.zoomedYScale || this.yScale;\n    //     // this.paintChart(xScale, yScale);\n    //   },\n    //   deep: true,\n    // }\n  },\n}\n</script>\n\n<style>\n</style>\n"]}]}