{"remainingRequest":"/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/src/components/BarChart.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/src/components/BarChart.vue","mtime":1705870572440},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/node_modules/cache-loader/dist/cjs.js","mtime":1705744300535},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/node_modules/babel-loader/lib/index.js","mtime":1705744300565},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/node_modules/cache-loader/dist/cjs.js","mtime":1705744300535},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/node_modules/vue-loader/lib/index.js","mtime":1705744299123}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["BarChart.vue"],"names":[],"mappings":";;AAifile":"BarChart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"vis-component\" ref=\"chart\">\n    <h6>Disasters Frequency per Country</h6>\n    <svg id=\"bar-svg\" :width=\"svgWidth\" :height=\"svgHeight\" @dblclick=\"resetZoom\" >\n      <g class=\"chart-group\" ref=\"chartGroup\">\n        <g class=\"brush-group\" ref=\"brushGroup\"></g>\n        <g class=\"axis axis-x\" ref=\"axisX\"></g>\n        <g class=\"axis axis-y\" ref=\"axisY\"></g>\n        <g class=\"bars-group\" ref=\"barsGroup\"></g>\n      </g>\n    </svg>\n    <div id=\"tooltip\" class=\"tooltip\" style=\"opacity:0;\"></div>\n  </div>\n</template>\n\n<script>\n\nimport * as d3 from 'd3';\n\nexport default {\n  name: 'BarChart',\n  props: {\n  },\n  data() {\n    const svgWidth = window.innerWidth * 4 / 12;\n    const svgHeight = window.innerHeight * 0.35;\n    return {\n      zoomedXScale: null,\n      // zoomedYScale: null,\n      svgWidth: svgWidth,\n      svgHeight: svgHeight,\n      svgPadding: {\n        top: 5, right: 20, bottom: 120, left: 100,\n      }\n      \n    }\n  },\n  mounted() {\n    this.drawChart(this.xScale);\n    this.addBrush();\n    this.initialize();\n    d3.select(\"#bar-svg\").append('g')\n      .attr('transform', 'translate(' + (this.svgWidth/2) + ','+ (this.svgHeight-10) +')')\n      .append(\"text\")\n      .text(\"Country\")\n      .style(\"font-size\", \"14px\")\n  },\n  methods: {\n    removeSelection() {\n      this.$store.commit('removeSelectedCountries');\n    },\n    initialize() {\n      var localbrushedCountries = [];\n      this.filteredData.forEach(d => localbrushedCountries.push(d.id));\n      this.$store.commit('changeBrushedCountries', localbrushedCountries);\n    },\n    resetZoom() {\n      this.zoomedXScale = null;\n      var localbrushedCountries = [];\n      this.$store.commit('changeBrushedCountries', localbrushedCountries);\n      this.initialize();\n      this.drawChart(this.xScale);\n    },\n    drawChart(xScale) {\n      if (this.$refs.chart) this.svgWidth = this.$refs.chart.clientWidth;\n      d3.select(this.$refs.chartGroup)\n        .attr('transform', `translate(${this.svgPadding.left},${this.svgPadding.top})`);\n      this.drawXAxis(xScale);\n      this.drawYAxis();\n      this.drawBars(xScale);\n    },\n    drawXAxis(xScale) {\n      const transition = d3.transition().duration(750); // Duration in milliseconds\n\n      const selectedData = this.filteredData.filter(d => this.selectedCountries.includes(d.id)).map(d => d.country);\n\n      const xAxisGroup = d3.select(this.$refs.axisX)\n        .attr('transform', `translate( 0, ${this.svgHeight - this.svgPadding.top - this.svgPadding.bottom} )`)\n        .transition(transition) // Apply transition to the axis group\n        .call(d3.axisBottom(xScale));\n\n      xAxisGroup.selectAll('text')\n        .attr('y', '7px')\n        .attr('x', '15px')\n        .style('text-anchor', 'start')\n        .attr('dx', '-.8em')\n        .attr('dy', '.15em')\n        .attr('transform', 'rotate(60)')\n        .style('font-size', '10px')\n        .attr('opacity', function(d) {\n            // Check if the country ID is in the selectedCountries array\n            let opacity = 0;\n            if (selectedData && selectedData.length !== 0) {\n              opacity = selectedData.includes(d) ? 1 : 0;\n            } else if (this.filteredData.length < 50) {\n              opacity = 1\n            } else {\n              opacity = 0\n            }\n            return opacity;\n\n        }.bind(this));\n\n      const label = d3.select(this.$refs.axisX).select('.x-axis-label');\n      if (label.empty()) {\n        d3.select(this.$refs.axisX) // Append to the main group, not the transitioning group\n          .append('text')\n          .attr('class', 'x-axis-label')\n          .attr('x', this.svgWidth / 2)\n          .attr('y', this.svgHeight *2) \n          .style('text-anchor', 'middle')\n          .style('font-size', '12px')\n          .text('Countries');\n      }\n\n    },\n    drawYAxis() {\n      d3.select(this.$refs.axisY)\n        .call(d3.axisLeft(this.yScale))\n        .style('font-size', '10px')\n        .append('text')\n        .attr('transform', 'rotate(-90)')\n        .attr('x', -this.svgHeight/2 + this.svgPadding.top + this.svgPadding.bottom - 30)\n        .attr('y', -this.svgPadding.left +55)\n        .attr('dy', '0.71em')\n        .attr('text-anchor', 'end')\n        .attr('fill', 'black')\n        .style('font-size', '12px')\n        .text(\"Disaster Frequency\");\n    },\n    drawBars(xScale) {\n      const barsGroup = d3.select(this.$refs.barsGroup);\n      const tooltip = d3.select(\"#tooltip\");\n      const transition = d3.transition().duration(750);\n\n      // Filter the data to only include brushed countries\n      const brushedData = this.brushedCountries.length\n        ? this.filteredData.filter(d => this.brushedCountries.includes(d.id))\n        : this.filteredData;\n\n      barsGroup.selectAll('.bar')\n        .data(brushedData, function(d) { return d.id; })\n        .join(\n          enter => enter.append('rect')\n            .attr('class', 'bar')\n            .attr('x', (d) => xScale(d.country))\n            .attr('width', xScale.bandwidth())\n            .attr('y', this.svgHeight - this.svgPadding.top - this.svgPadding.bottom) // Start from bottom\n            .attr('height', 0) \n            .call(enter => enter.transition(transition) // Transition on enter\n              .attr('y', (d) => this.yScale(d.value))\n              .attr('height', (d) => this.svgHeight - this.svgPadding.top - this.svgPadding.bottom - this.yScale(d.value))),\n          update => update.call(update => update.transition(transition) // Transition on update\n            .attr('x', (d) => xScale(d.country))\n            .attr('width', xScale.bandwidth())\n            .attr('y', (d) => this.yScale(d.value))\n            .attr('height', (d) => this.svgHeight - this.svgPadding.top - this.svgPadding.bottom - this.yScale(d.value))),\n          exit => exit.call(exit => exit.transition(transition) // Transition on exit\n            .attr('y', this.svgHeight - this.svgPadding.top - this.svgPadding.bottom)\n            .attr('height', 0)\n            .remove())\n        )\n        .attr('fill', d => {\n          const countryData = this.filteredData.find(s => s.id === d.id);\n          const isSelected = this.selectedCountries.includes(d.id);\n          if (countryData.country) {\n            if (isSelected) {\n              if (this.brushedCountries.includes(countryData.id)) {\n                return 'rgb(253, 255, 181)';\n              } else {\n                return 'rgb(150, 150, 150)';\n              }\n            } else {\n              if (this.brushedCountries.includes(countryData.id)) {\n                return this.getColorForCountry(countryData);\n              } else {\n                return 'rgb(130, 130, 130)';\n              }\n            }\n          } else {\n            return 'darkgrey';\n          }\n        })\n        .on('click', (event, d) => this.handleBarClick(d.id))\n        .on('mouseover', (event, d) => {\n          let landCoverTemp;\n          let carbonStocksTemp;\n          let disastersFreqTemp;\n          const hoveringLandCover = this.landCover.find(country => country.id === d.id);\n          const hoveringCarbonStocks = this.carbonStocks.find(country => country.id === d.id);\n          const hoveringDisasters = this.disastersFreq.find(country => country.id === d.id)\n          if (hoveringLandCover) {\n            landCoverTemp = hoveringLandCover.value === 0 ? 'No Data' : hoveringLandCover.value.toFixed(4);\n          } else {\n            landCoverTemp = 'No Data';\n          }\n          if (hoveringCarbonStocks) {\n            carbonStocksTemp = hoveringCarbonStocks.value === 0 ? 'No Data' : hoveringCarbonStocks.value.toFixed(4);\n          } else {\n            carbonStocksTemp = 'No Data';\n          }\n          if (hoveringDisasters) {\n            disastersFreqTemp = hoveringDisasters.value === -1 ? 'No Data' : hoveringDisasters.value;\n          } else {\n            disastersFreqTemp = 'No Data';\n          }\n          tooltip.transition()\n            .duration(200)\n            .style('opacity', 1);\n\n\n          tooltip.html(`\n            <table>\n              <tr><td class=\"label\">Country:</td>         <td class=\"value\">${d.country}</td></tr>\n              <tr><td class=\"label\">CarbonStocks:</td>        <td class=\"value\">${carbonStocksTemp}</td></tr>\n              <tr><td class=\"label\">LandCoverIndex:</td>     <td class=\"value\">${landCoverTemp}</td></tr>\n              <tr><td class=\"label\">disastersFreq:</td>     <td class=\"value\">${disastersFreqTemp}</td></tr>\n            </table>\n          `)\n            .style('left', (event.clientX - 275) + 'px')\n            .style('top', (event.clientY - 400) + 'px');\n        })\n        .on('mouseout', () => {\n          tooltip.transition().duration(500).style('opacity', 0);\n          \n        });\n    },\n\n    handleBarClick(countryId) {\n      const isSelected = this.selectedCountries.includes(countryId);\n      if (!isSelected) {\n        this.$store.commit('changeSelectedCountries', countryId);\n      } else {\n        this.$store.commit('removeSelectedCountry', countryId);\n      }\n    },\n    getColorForCountry(countryData) {\n      const colors = [\n        \"rgb(230, 230, 230)\",\n        \"rgb(220, 183, 210)\", // 0 1 \n        \"rgb(211, 146, 194)\", // 0 0 \n        \"rgb(195, 238, 199)\", // 1 2 \n        \"rgb(151, 185, 199)\", \n        \"rgb(168, 140, 191)\", // 1 0 \n        \"rgb(148, 221, 166)\", // 2 2 \n        \"rgb(129, 186, 162)\", // 2 1 \n        \"rgb(107, 120, 155)\",\n      ];\n      const landCoverData = this.landCover.find(country => country.id === countryData.id);\n      const carbonStocksData = this.carbonStocks.find(country => country.id === countryData.id);\n      if (!landCoverData || !carbonStocksData) {\n        // Handle the case where data is not available for the country\n        return 'darkgrey';\n      }\n      let landCoverCategory = this.getLandCoverCategory(landCoverData.value);\n      let carbonStocksCategory = this.getCarbonStocksCategory(carbonStocksData.value);\n\n      if (carbonStocksCategory === 'low' && landCoverCategory === 'low') return colors[0];\n      if (carbonStocksCategory === 'low' && landCoverCategory === 'medium') return colors[1];\n      if (carbonStocksCategory === 'low' && landCoverCategory === 'high') return colors[2];\n      if (carbonStocksCategory === 'medium' && landCoverCategory === 'low') return colors[3];\n      if (carbonStocksCategory === 'medium' && landCoverCategory === 'medium') return colors[4];\n      if (carbonStocksCategory === 'medium' && landCoverCategory === 'high') return colors[5];\n      if (carbonStocksCategory === 'high' && landCoverCategory === 'low') return colors[6];\n      if (carbonStocksCategory === 'high' && landCoverCategory === 'medium') return colors[7];\n      if (carbonStocksCategory === 'high' && landCoverCategory === 'high') return colors[8];\n    },\n    getLandCoverCategory(landCover) {\n      const xFirstTick = this.landCoverMin + (this.landCoverMax - this.landCoverMin) / 3;\n      const xSecondTick = this.landCoverMin + 2 * (this.landCoverMax - this.landCoverMin) / 3;\n      const xThresholds = [xFirstTick, xSecondTick];\n      if (landCover <= xThresholds[0]) return 'low';\n      if (landCover <= xThresholds[1]) return 'medium';\n      return 'high';\n    },\n\n    getCarbonStocksCategory(carbonStocks) {\n      const yFirstTick = this.carbonStocksMin + (this.carbonStocksMax - this.carbonStocksMin) / 3;\n      const ySecondTick = this.carbonStocksMin + 2 * (this.carbonStocksMax - this.carbonStocksMin) / 3;\n      const yThresholds = [yFirstTick, ySecondTick];\n      if (carbonStocks <= yThresholds[0]) return 'low';\n      if (carbonStocks <= yThresholds[1]) return 'medium';\n      return 'high';\n    },\n\n    addBrush() {\n      this.brush = d3.brushX()\n        .extent([[0,0], [this.svgWidth - this.svgPadding.left - this.svgPadding.right, \n          this.svgHeight - this.svgPadding.bottom - this.svgPadding.top]])\n        .on('end', this.onBrush);\n      \n      d3.select(this.$refs.brushGroup)\n        .attr('class', 'brush')\n        .call(this.brush);\n    },\n    // get states in brush\n    onBrush(event) {\n      var selection = event.selection;\n      var brushedIds = [];\n      var xScale;\n      if (this.zoomedXScale) {\n        xScale = this.zoomedXScale;\n      } else {\n        xScale = this.xScale\n      }\n\n      if (selection) {\n        const [x0, x1] = selection;\n        \n        // Filter the data based on the brushed selection\n        brushedIds = this.filteredData\n          .filter(d => {\n            const x = xScale(d.country);\n            return x >= x0 && x <= x1;\n          })\n          .map(d => d.id);\n      }\n      this.drawBars(xScale); // Redraw bars with updated data\n        \n      var idleTimeout;\n      if (!selection) {\n        if (!idleTimeout) return idleTimeout = setTimeout(() => {\n          idleTimeout = null\n        }, 1) \n      }\n      d3.select('#bar-svg').select(\".brush\").call(this.brush.move, null)\n\n      this.$store.commit('changeBrushedCountries', brushedIds);\n    },\n    \n  },\n  computed: {\n    \n    filteredData() {\n      let filtered = this.disastersFreq.filter(d => d.value > 0);\n      if (this.brushedCountries.length > 0) {\n        filtered = filtered.filter(d => this.brushedCountries.includes(d.id));\n      }\n      filtered.sort((a, b) => d3.descending(+a.value, +b.value));\n      return filtered;\n    },\n    landCover: {\n      get() {\n        return this.$store.getters.landCover;\n      }\n    },\n    carbonStocks: {\n      get() {\n        return this.$store.getters.carbonStocks;\n      }\n    },\n    disastersFreq: {\n      get() {\n        return this.$store.getters.disastersFreq;\n      }\n    },\n    dataMax() {\n      return 40;\n    },\n    dataMin() {\n      return 0;\n    },\n    carbonStocksMax() {\n      return 200;\n    },\n    carbonStocksMin() {\n      return 0;\n    },\n    landCoverMax() {\n      return 130;\n    },\n    landCoverMin() {\n      return 70;\n    },\n    xScale() {\n      return d3.scaleBand()\n        .rangeRound([0, this.svgWidth - this.svgPadding.left - this.svgPadding.right]).padding(0.15)\n        .domain(this.filteredData.map((d) => d.country));\n    },\n    yScale() {\n      return d3.scaleLinear()\n        .rangeRound([this.svgHeight - this.svgPadding.top - this.svgPadding.bottom, 0])\n        .domain([this.dataMin > 0 ? 0 : this.dataMin, this.dataMax]);\n    },\n    selectedCountries: {\n      get() {\n        return this.$store.getters.selectedCountries;\n      }\n    },\n    brushedCountries: {\n      get() {\n        return this.$store.getters.brushedCountries;\n      }\n    },\n  },\n  watch: {\n    landCover: {\n      handler() {\n        this.drawChart(this.xScale);\n      },\n      deep: true,\n    },\n    carbonStocks: {\n      handler() {\n        this.drawChart(this.xScale);\n      },\n      deep: true,\n    },\n    disastersFreq: {\n      handler() {\n        this.drawChart(this.xScale);\n      },\n      deep: true,\n    },\n    brushedCountries: {\n      handler() {\n        this.drawChart(this.xScale);\n      },\n      deep: true,\n    },\n    selectedCountries: {\n      handler() {\n        if (this.zoomedXScale) {\n          this.drawChart(this.zoomedXScale);\n        } else {\n          this.drawChart(this.xScale);\n        }\n      },\n      deep: true,\n    }\n  },\n}\n</script>\n\n<style>\n\n.bar:hover {\n  border-width: 1;\n  border-color: rgb(253, 255, 181);\n  opacity: 0.7;\n}\n\n\n</style>\n"]}]}