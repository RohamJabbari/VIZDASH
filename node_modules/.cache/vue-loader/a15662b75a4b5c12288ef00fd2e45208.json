{"remainingRequest":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/src/components/Scatterplot_1.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/src/components/Scatterplot_1.vue","mtime":1705768136798},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/cache-loader/dist/cjs.js","mtime":1705744300535},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/babel-loader/lib/index.js","mtime":1705744300565},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/cache-loader/dist/cjs.js","mtime":1705744300535},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/vue-loader/lib/index.js","mtime":1705744299123}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Scatterplot_1.vue"],"names":[],"mappings":";;AAmfile":"Scatterplot_1.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"vis-component\" ref=\"chart\">\n    <h6>Carbon Stocks / Land Cover Information per Country</h6>\n    <svg id=\"scatter1-svg\" :width=\"svgWidth\" :height=\"svgHeight\" @dblclick=\"resetZoom\">\n      <g class=\"chart-group\" ref=\"chartGroup\">\n        <g class=\"grid-background\" ref=\"gridBackground\"></g>\n        <g class=\"brush-group\" ref=\"brushGroup\"></g>\n        <g class=\"axis axis-x\" ref=\"axisX\"></g>\n        <g class=\"axis axis-y\" ref=\"axisY\"></g>\n        <g class=\"points-group\" ref=\"pointsGroup\"></g>\n      </g>\n    </svg>\n    \n    <div id=\"tooltip\" class=\"tooltip\" style=\"opacity:0;\"></div>\n  </div>\n</template>\n\n<script>\n\nimport * as d3 from 'd3';\n\nexport default {\n  name: 'Scatterplot_1',\n  props: {\n  },\n  data() {\n    const svgWidth = window.innerWidth * 4 / 12;\n    const svgHeight = window.innerHeight * 0.35;\n    return {\n      zoomedXScale: null,\n      zoomedYScale: null,\n      svgWidth: svgWidth,\n      svgHeight: svgHeight,\n      svgPadding: {\n        top: 5, right: 15, bottom: 60, left: 60,\n      },\n    }\n  },\n  mounted() {\n    this.paintChart(this.xScale, this.yScale);\n    this.drawChart(this.xScale, this.yScale);\n    this.drawXAxis(this.xScale);\n    this.drawYAxis(this.yScale);\n    this.addBrush();\n    this.initialize();\n\n    d3.select('#scatter1-svg').on('click', (event) => {\n      if (event.target === d3.select('#scatter1-svg').node()) {\n        this.removeSelection();\n      }\n    });\n  },\n  methods: {\n    removeSelection() {\n      this.$store.commit('removeSelectedCountries');\n    },\n    initialize() {\n      var localbrushedCountries = [];\n      this.filteredData.forEach(d => localbrushedCountries.push(d.id));\n      this.$store.commit('changeBrushedCountries', localbrushedCountries);\n    },\n    resetZoom() {\n      this.zoomedXScale = null;\n      this.zoomedYScale = null;\n      this.paintChart(this.xScale, this.yScale);\n      this.drawChart(this.xScale, this.yScale);\n      this.initialize()\n    },\n    // called for each updage\n    drawChart(xScale, yScale) {\n      xScale = xScale || this.xScale;\n      yScale = yScale || this.yScale;\n\n      // Update axes\n      this.drawXAxis(xScale);\n      this.drawYAxis(yScale);\n      \n      d3.select(this.$refs.chartGroup)\n        .attr('transform', `translate(${this.svgPadding.left},${this.svgPadding.top})`);\n      this.drawPoints(xScale, yScale);\n    },\n    // brush for showing on choroplethmap\n    addBrush() {\n      this.brush = d3.brush()\n        .extent([[0,0], [this.svgWidth - this.svgPadding.left - this.svgPadding.right, \n          this.svgHeight - this.svgPadding.bottom - this.svgPadding.top]])\n        .on('end', this.onBrush);\n      \n      d3.select(this.$refs.brushGroup)\n        .attr('class', 'brush')\n        .call(this.brush);\n    },\n    // get states in brush\n    onBrush(event) {\n      const filteredPoints = this.filteredData.filter(d => this.brushedCountries.includes(d.id));\n      var selection = event.selection;\n      var localbrushedCountries = [];\n      \n      var x0,x1,y0,y1,idleTimeout;\n      if (!selection) {\n        filteredPoints.forEach(d => localbrushedCountries.push(d.id));\n        if (!idleTimeout) return idleTimeout = setTimeout(() => {\n          idleTimeout = null\n        }, 1);\n      } else {\n        // Calculate new scales for zoom\n        if (this.zoomedXScale) {\n          x0 = this.zoomedXScale.invert(selection[0][0]);\n          x1 = this.zoomedXScale.invert(selection[1][0]);\n          y0 = this.zoomedYScale.invert(selection[1][1]);\n          y1 = this.zoomedYScale.invert(selection[0][1]);\n        } else {\n          x0 = this.xScale.invert(selection[0][0]);\n          x1 = this.xScale.invert(selection[1][0]);\n          y0 = this.yScale.invert(selection[1][1]);\n          y1 = this.yScale.invert(selection[0][1]);\n        }\n\n        this.zoomedXScale = d3.scaleLinear().domain([x0, x1]).range([0, this.svgWidth - this.svgPadding.left - this.svgPadding.right]);\n        this.zoomedYScale = d3.scaleLinear().domain([y0, y1]).range([this.svgHeight - this.svgPadding.top - this.svgPadding.bottom, 0]);\n\n        // Redraw chart with new scales\n        this.drawChart(this.zoomedXScale, this.zoomedYScale);\n\n        // Filter brushed countries\n        filteredPoints.forEach(d => {\n          if (d.carbonStocks >= y0 && d.carbonStocks <= y1 && d.landCover >= x0 && d.landCover <= x1) {\n            localbrushedCountries.push(d.id);\n          }\n        });\n        \n      }\n\n      this.paintChart(this.zoomedXScale, this.zoomedYScale)\n\n      d3.select('#scatter1-svg').select(\".brush\").call(this.brush.move, null)\n\n      this.$store.commit('changeBrushedCountries', localbrushedCountries);\n    },\n    // X-axis\n    drawXAxis(xScale) {\n      const xAxisGroup = d3.select(this.$refs.axisX)\n        .attr('transform', `translate(0, ${this.svgHeight - this.svgPadding.top - this.svgPadding.bottom})`)\n        .call(d3.axisBottom(xScale))\n        .style('font-size', '10');\n\n      const xAxisText = xAxisGroup.selectAll('.x-axis-label').data(['Land Cover Index (Compared to 2015)']);\n\n      xAxisText.enter()\n        .append('text')\n        .attr('class', 'x-axis-label')\n        .merge(xAxisText)\n        .attr('x', this.svgWidth/2 + this.svgPadding.left + this.svgPadding.right + 5)\n        .attr('y', this.svgPadding.bottom - 10)\n        .attr('text-anchor', 'end')\n        .style('fill', 'black')\n        .style('font-size', '14px')\n        .text(d => d);\n      },\n    // Y-axis\n    drawYAxis(yScale) {\n      const yAxisGroup = d3.select(this.$refs.axisY)\n        .attr('transform', `translate( 0, 0)`)\n        .call(d3.axisLeft(yScale))\n        .style('font-size', '10');\n        \n      const yAxisText = yAxisGroup.selectAll('.y-axis-label').data(['Carbon Stocks']);\n\n      yAxisText.enter()\n        .append('text')\n        .attr('class', 'y-axis-label')\n        .merge(yAxisText)\n        .attr('transform', 'rotate(-90)')\n        .attr('y', -this.svgPadding.left + 5)\n        .attr('x', -this.svgHeight/4 + this.svgPadding.top + this.svgPadding.bottom + 10)\n        .attr('dy', '0.71em')\n        .attr('text-anchor', 'end') \n        .attr('fill', 'black')\n        .style('font-size', '14px')\n        .text(\"Carbon Stocks Index (Compared to 1992)\");\n    },\n    // add country points on scatterplot\n    drawPoints(xScale, yScale) {\n      const pointsGroup = d3.select(this.$refs.pointsGroup);\n      const filteredPoints = this.filteredData.filter(d => this.brushedCountries.includes(d.id));\n      console.log('filtered');\n      console.log(filteredPoints);\n\n      const tooltip = d3.select(\"#tooltip\");\n      const transition = d3.transition().duration(750);\n      filteredPoints.sort((a, b) => {\n        const aSelected = this.selectedCountries.includes(a.id);\n        const bSelected = this.selectedCountries.includes(b.id);\n        return aSelected === bSelected ? 0 : aSelected ? 1 : -1;\n      });\n      const xRange = xScale.range();\n      const yRange = yScale.range();\n      const inBoundData = filteredPoints.filter(d => {\n\n        const cx = xScale(d.landCover);\n        const cy = yScale(d.carbonStocks);\n        \n\n\n        return cx >= xRange[0] && cx <= xRange[1] && cy <= yRange[0] && cy >= yRange[1];\n      });\n\n      console.log('bounded');\n      console.log(inBoundData);\n\n\n      pointsGroup.selectAll('.point')\n        .data(inBoundData, function(d) { return d.id; })\n        .join(\n          enter => enter.append('circle')\n                        .attr('class', 'point')\n                        .attr('cx', d => xScale(d.landCover))\n                        .attr('cy', this.svgHeight - this.svgPadding.bottom) // start from bottom\n                        .attr('r', 6) // start from zero radius\n                        .call(enter => enter.transition(transition)\n                            .attr('cy', d => yScale(d.carbonStocks))\n                            .attr('r', 6)),\n          update => update.call(update => update.transition(transition)\n                            .attr('cx', d => xScale(d.landCover))\n                            .attr('cy', d => yScale(d.carbonStocks))),\n          exit => exit.call(exit => exit.transition(transition)\n                            .attr('cy', this.svgHeight - this.svgPadding.bottom)\n                            .attr('r', 6)\n                            .remove())\n        )\n        .attr('fill', d => this.selectedCountries.includes(d.id) ? \"rgb(253, 255, 181)\" : \"rgb(1, 39, 39)\")\n        \n        .on('mouseover', function(event, d) {\n          d3.select(this)\n            .raise()\n            .attr('stroke', 'aqua')\n            .attr('stroke-width', 2);\n          let landCoverTemp = d.landCover === 0 ? 'No Data' : d.landCover.toFixed(2);\n          let carbonStocksTemp = d.carbonStocks === 0 ? 'No Data' : d.carbonStocks.toFixed(2);\n          let disastersFreqTemp = d.disastersFreq === -1 ? 'No Data' : d.disastersFreq;\n          tooltip.transition()\n            .duration(200)\n            .style('opacity', 1);\n          tooltip.html(`\n            <table>\n              <tr><td class=\"label\">Country:</td>         <td class=\"country_value\">${d.country}</td></tr>\n              <tr><td class=\"label\">Carbon Stocks:</td>     <td class=\"value\">${carbonStocksTemp}</td></tr>\n              <tr><td class=\"label\">Land Cover:</td>        <td class=\"value\">${landCoverTemp}</td></tr>\n              <tr><td class=\"label\">Disasters Frequency:</td>     <td class=\"value\">${disastersFreqTemp}</td></tr>\n            </table>\n          `)\n          .style('left', (event.clientX - 275) + 'px')\n          .style('top', (event.clientY - 100) + 'px');\n        })\n        .on('mouseout', function() {\n          d3.select(this)\n            .attr('r', 6)\n            .attr('stroke', 'none')\n            .attr('stroke-width', 0);\n          tooltip.transition()\n            .duration(500)\n            .style('opacity', 0);\n        })\n        .on('click', (event, d) => this.handleClick(d.id));\n\n    },\n    handleClick(countryId) {\n      const isSelected = this.selectedCountries.includes(countryId);\n      if (!isSelected) {\n        this.$store.commit('changeSelectedCountries', countryId);\n      } else {\n        this.$store.commit('removeSelectedCountry', countryId);\n      }\n    },\n    checkVisibility(d) {\n      console.log('Checking visibility for:', d);\n      const isWithinBounds = d.landCover <= 130 && d.carbonStocks <= 200;\n      return isWithinBounds ? 'visible' : 'hidden';\n    },\n\n      \n    // coloring the grid\n    paintChart(xScale, yScale) {\n      xScale = xScale || this.xScale;\n      yScale = yScale || this.yScale;\n      const background = d3.select(this.$refs.gridBackground);\n      background.selectAll('rect').remove()\n      background.selectAll('#plot-area-clip-background').remove()\n      const colors = [\n        \"rgb(230, 230, 230)\",\n        \"rgb(220, 183, 210)\", // 0 1 \n        \"rgb(211, 146, 194)\", // 0 0 \n        \"rgb(195, 238, 199)\", // 1 2 \n        \"rgb(151, 185, 199)\", \n        \"rgb(168, 140, 191)\", // 1 0 \n        \"rgb(148, 221, 166)\", // 2 2 \n        \"rgb(129, 186, 162)\", // 2 1 \n        \"rgb(107, 120, 155)\",\n      ];\n      background.append(\"defs\").append(\"clipPath\")\n        .attr(\"id\", \"plot-area-clip-background\")\n        .append(\"rect\")\n        .attr(\"width\", this.svgWidth - this.svgPadding.left - this.svgPadding.right)\n        .attr(\"height\", this.svgHeight - this.svgPadding.top - this.svgPadding.bottom);\n      const xFirstTick = this.landCoverMin + (this.landCoverMax - this.landCoverMin)/3;\n      const xSecondTick = this.landCoverMin + 2*(this.landCoverMax - this.landCoverMin)/3;\n      const xValues = [this.landCoverMin, xFirstTick, xSecondTick, this.landCoverMax];\n      const yFirstTick = this.carbonStocksMin + (this.carbonStocksMax - this.carbonStocksMin)/3;\n      const ySecondTick = this.carbonStocksMin + 2*(this.carbonStocksMax - this.carbonStocksMin)/3;\n      const yValues = [this.carbonStocksMin, yFirstTick, ySecondTick,this.carbonStocksMax];\n      for (let i = 0; i < yValues.length - 1; i++) {\n        for (let j = 0; j < xValues.length - 1; j++) {\n          background.append('rect')\n            .attr('x', xScale(xValues[j]))\n            .attr('y', yScale(yValues[i+1]))\n            .attr('width', (xScale(xValues[j+1]) - xScale(j)))\n            .attr('height', (yScale(yValues[i]) - yScale(yValues[i+1])))\n            .attr(\"clip-path\", \"url(#plot-area-clip-background)\")\n            .attr('fill', colors[j + i * 3])\n            .attr('opacity', 1);\n          background.append('rect')\n            .attr('x', xScale(xValues[j]))\n            .attr('y', yScale(yValues[i+1]))\n            .attr('width', 0)  // Start with a width of 0 for the transition\n            .attr('height', 0) // Start with a height of 0 for the transition\n            .attr(\"clip-path\", \"url(#plot-area-clip-background)\")\n            .attr('fill', colors[j + i * 3])\n            .attr('opacity', 0) // Start with an opacity of 0 for the transition\n            .attr('width', xScale(xValues[j+1]) - xScale(xValues[j]))\n            .attr('height', yScale(yValues[i]) - yScale(yValues[i+1]))\n            .attr('opacity', 1);\n        }\n      }\n    },\n  },\n  computed: {\n    filteredData() {\n      return this.combinedData.filter(d => d.landCover !== 0);\n    },\n    combinedData() {\n      let combined = this.carbonStocks.map(cs => {\n        let landCoverData = this.landCover.find(landCover => landCover.id === cs.id);\n        let disastersFreqData = this.disastersFreq.find(disastersFreq => disastersFreq.id === cs.id);\n        return {\n          id: cs.id,\n          country: cs.country,\n          carbonStocks: cs.value,\n          landCover: landCoverData ? landCoverData.value: 0,\n          disastersFreq: disastersFreqData ? disastersFreqData.value: -1\n        };\n      });\n      return combined;\n    },\n    landCover: {\n      get() {\n        return this.$store.getters.landCover;\n      }\n    },\n    carbonStocks: {\n      get() {\n        return this.$store.getters.carbonStocks;\n      }\n    },\n    disastersFreq: {\n      get() {\n        return this.$store.getters.disastersFreq;\n      }\n    },\n    carbonStocksMax() {\n      return 200;\n    },\n    carbonStocksMin() {\n      return 0;\n    },\n    landCoverMax() {\n      return 130;\n    },\n    landCoverMin() {\n      return 70;\n    },\n    xScale() {\n      return d3.scaleLinear()\n        .rangeRound([0, this.svgWidth - this.svgPadding.left - this.svgPadding.right])\n        .domain([this.landCoverMin, this.landCoverMax]);\n    },\n    yScale() {\n      return d3.scaleLinear()\n        .rangeRound([this.svgHeight - this.svgPadding.top - this.svgPadding.bottom, 0])\n        .domain([this.carbonStocksMin, this.carbonStocksMax]);\n    },\n    \n    brushedCountries: {\n      get() {\n        return this.$store.getters.brushedCountries;\n      }\n    },\n    selectedCountries: {\n      get() {\n        return this.$store.getters.selectedCountries;\n      }\n    }\n  },\n  watch: {\n    landCover: {\n      handler() {\n        let xScale = this.zoomedXScale || this.xScale;\n        let yScale = this.zoomedYScale || this.yScale;\n        this.drawChart(xScale, yScale);\n      },\n      deep: true,\n    },\n    carbonStocks: {\n      handler() {\n        let xScale = this.zoomedXScale || this.xScale;\n        let yScale = this.zoomedYScale || this.yScale;\n        this.drawChart(xScale, yScale);\n      },\n      deep: true,\n    },\n    disastersFreq: {\n      handler() {\n        let xScale = this.zoomedXScale || this.xScale;\n        let yScale = this.zoomedYScale || this.yScale;\n        this.drawChart(xScale, yScale);\n      },\n      deep: true,\n    },\n    selectedCountries: {\n      handler() {\n        this.drawChart(this.zoomedXScale, this.zoomedYScale);\n      },\n      deep: true,\n    },\n    filteredData: {\n      handler() {\n        this.initialize();\n      },\n      deep: true,\n    },\n    brushedCountries: {\n      handler() {\n        if (this.zoomedXScale && this.zoomedYScale) {\n          this.drawPoints(this.zoomedXScale, this.zoomedYScale);\n        } else {\n          this.drawPoints(this.xScale, this.yScale);\n        }\n      },\n      deep: true,\n    }\n  },\n}\n</script>\n\n<style>\n</style>\n"]}]}