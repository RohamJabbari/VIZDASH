{"remainingRequest":"/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/node_modules/babel-loader/lib/index.js!/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/src/components/BarChart.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/src/components/BarChart.vue","mtime":1705870572440},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/babel.config.js","mtime":1703791909061},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/node_modules/cache-loader/dist/cjs.js","mtime":1705744300535},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/node_modules/babel-loader/lib/index.js","mtime":1705744300565},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/node_modules/cache-loader/dist/cjs.js","mtime":1705744300535},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/jabbarir79_A5/node_modules/vue-loader/lib/index.js","mtime":1705744299123}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["d3","name","props","data","svgWidth","window","innerWidth","svgHeight","innerHeight","zoomedXScale","svgPadding","top","right","bottom","left","mounted","drawChart","xScale","addBrush","initialize","select","append","attr","text","style","methods","removeSelection","$store","commit","localbrushedCountries","filteredData","forEach","d","push","id","resetZoom","$refs","chart","clientWidth","chartGroup","drawXAxis","drawYAxis","drawBars","transition","duration","selectedData","filter","selectedCountries","includes","map","country","xAxisGroup","axisX","call","axisBottom","selectAll","opacity","length","bind","label","empty","axisY","axisLeft","yScale","barsGroup","tooltip","brushedData","brushedCountries","join","enter","bandwidth","value","update","exit","remove","countryData","find","s","isSelected","getColorForCountry","on","event","handleBarClick","landCoverTemp","carbonStocksTemp","disastersFreqTemp","hoveringLandCover","landCover","hoveringCarbonStocks","carbonStocks","hoveringDisasters","disastersFreq","toFixed","html","clientX","clientY","countryId","colors","landCoverData","carbonStocksData","landCoverCategory","getLandCoverCategory","carbonStocksCategory","getCarbonStocksCategory","xFirstTick","landCoverMin","landCoverMax","xSecondTick","xThresholds","yFirstTick","carbonStocksMin","carbonStocksMax","ySecondTick","yThresholds","brush","brushX","extent","onBrush","brushGroup","selection","brushedIds","x0","x1","x","idleTimeout","setTimeout","move","computed","filtered","sort","a","b","descending","get","getters","dataMax","dataMin","scaleBand","rangeRound","padding","domain","scaleLinear","watch","handler","deep"],"sources":["src/components/BarChart.vue"],"sourcesContent":["<template>\n  <div class=\"vis-component\" ref=\"chart\">\n    <h6>Disasters Frequency per Country</h6>\n    <svg id=\"bar-svg\" :width=\"svgWidth\" :height=\"svgHeight\" @dblclick=\"resetZoom\" >\n      <g class=\"chart-group\" ref=\"chartGroup\">\n        <g class=\"brush-group\" ref=\"brushGroup\"></g>\n        <g class=\"axis axis-x\" ref=\"axisX\"></g>\n        <g class=\"axis axis-y\" ref=\"axisY\"></g>\n        <g class=\"bars-group\" ref=\"barsGroup\"></g>\n      </g>\n    </svg>\n    <div id=\"tooltip\" class=\"tooltip\" style=\"opacity:0;\"></div>\n  </div>\n</template>\n\n<script>\n\nimport * as d3 from 'd3';\n\nexport default {\n  name: 'BarChart',\n  props: {\n  },\n  data() {\n    const svgWidth = window.innerWidth * 4 / 12;\n    const svgHeight = window.innerHeight * 0.35;\n    return {\n      zoomedXScale: null,\n      // zoomedYScale: null,\n      svgWidth: svgWidth,\n      svgHeight: svgHeight,\n      svgPadding: {\n        top: 5, right: 20, bottom: 120, left: 100,\n      }\n      \n    }\n  },\n  mounted() {\n    this.drawChart(this.xScale);\n    this.addBrush();\n    this.initialize();\n    d3.select(\"#bar-svg\").append('g')\n      .attr('transform', 'translate(' + (this.svgWidth/2) + ','+ (this.svgHeight-10) +')')\n      .append(\"text\")\n      .text(\"Country\")\n      .style(\"font-size\", \"14px\")\n  },\n  methods: {\n    removeSelection() {\n      this.$store.commit('removeSelectedCountries');\n    },\n    initialize() {\n      var localbrushedCountries = [];\n      this.filteredData.forEach(d => localbrushedCountries.push(d.id));\n      this.$store.commit('changeBrushedCountries', localbrushedCountries);\n    },\n    resetZoom() {\n      this.zoomedXScale = null;\n      var localbrushedCountries = [];\n      this.$store.commit('changeBrushedCountries', localbrushedCountries);\n      this.initialize();\n      this.drawChart(this.xScale);\n    },\n    drawChart(xScale) {\n      if (this.$refs.chart) this.svgWidth = this.$refs.chart.clientWidth;\n      d3.select(this.$refs.chartGroup)\n        .attr('transform', `translate(${this.svgPadding.left},${this.svgPadding.top})`);\n      this.drawXAxis(xScale);\n      this.drawYAxis();\n      this.drawBars(xScale);\n    },\n    drawXAxis(xScale) {\n      const transition = d3.transition().duration(750); // Duration in milliseconds\n\n      const selectedData = this.filteredData.filter(d => this.selectedCountries.includes(d.id)).map(d => d.country);\n\n      const xAxisGroup = d3.select(this.$refs.axisX)\n        .attr('transform', `translate( 0, ${this.svgHeight - this.svgPadding.top - this.svgPadding.bottom} )`)\n        .transition(transition) // Apply transition to the axis group\n        .call(d3.axisBottom(xScale));\n\n      xAxisGroup.selectAll('text')\n        .attr('y', '7px')\n        .attr('x', '15px')\n        .style('text-anchor', 'start')\n        .attr('dx', '-.8em')\n        .attr('dy', '.15em')\n        .attr('transform', 'rotate(60)')\n        .style('font-size', '10px')\n        .attr('opacity', function(d) {\n            // Check if the country ID is in the selectedCountries array\n            let opacity = 0;\n            if (selectedData && selectedData.length !== 0) {\n              opacity = selectedData.includes(d) ? 1 : 0;\n            } else if (this.filteredData.length < 50) {\n              opacity = 1\n            } else {\n              opacity = 0\n            }\n            return opacity;\n\n        }.bind(this));\n\n      const label = d3.select(this.$refs.axisX).select('.x-axis-label');\n      if (label.empty()) {\n        d3.select(this.$refs.axisX) // Append to the main group, not the transitioning group\n          .append('text')\n          .attr('class', 'x-axis-label')\n          .attr('x', this.svgWidth / 2)\n          .attr('y', this.svgHeight *2) \n          .style('text-anchor', 'middle')\n          .style('font-size', '12px')\n          .text('Countries');\n      }\n\n    },\n    drawYAxis() {\n      d3.select(this.$refs.axisY)\n        .call(d3.axisLeft(this.yScale))\n        .style('font-size', '10px')\n        .append('text')\n        .attr('transform', 'rotate(-90)')\n        .attr('x', -this.svgHeight/2 + this.svgPadding.top + this.svgPadding.bottom - 30)\n        .attr('y', -this.svgPadding.left +55)\n        .attr('dy', '0.71em')\n        .attr('text-anchor', 'end')\n        .attr('fill', 'black')\n        .style('font-size', '12px')\n        .text(\"Disaster Frequency\");\n    },\n    drawBars(xScale) {\n      const barsGroup = d3.select(this.$refs.barsGroup);\n      const tooltip = d3.select(\"#tooltip\");\n      const transition = d3.transition().duration(750);\n\n      // Filter the data to only include brushed countries\n      const brushedData = this.brushedCountries.length\n        ? this.filteredData.filter(d => this.brushedCountries.includes(d.id))\n        : this.filteredData;\n\n      barsGroup.selectAll('.bar')\n        .data(brushedData, function(d) { return d.id; })\n        .join(\n          enter => enter.append('rect')\n            .attr('class', 'bar')\n            .attr('x', (d) => xScale(d.country))\n            .attr('width', xScale.bandwidth())\n            .attr('y', this.svgHeight - this.svgPadding.top - this.svgPadding.bottom) // Start from bottom\n            .attr('height', 0) \n            .call(enter => enter.transition(transition) // Transition on enter\n              .attr('y', (d) => this.yScale(d.value))\n              .attr('height', (d) => this.svgHeight - this.svgPadding.top - this.svgPadding.bottom - this.yScale(d.value))),\n          update => update.call(update => update.transition(transition) // Transition on update\n            .attr('x', (d) => xScale(d.country))\n            .attr('width', xScale.bandwidth())\n            .attr('y', (d) => this.yScale(d.value))\n            .attr('height', (d) => this.svgHeight - this.svgPadding.top - this.svgPadding.bottom - this.yScale(d.value))),\n          exit => exit.call(exit => exit.transition(transition) // Transition on exit\n            .attr('y', this.svgHeight - this.svgPadding.top - this.svgPadding.bottom)\n            .attr('height', 0)\n            .remove())\n        )\n        .attr('fill', d => {\n          const countryData = this.filteredData.find(s => s.id === d.id);\n          const isSelected = this.selectedCountries.includes(d.id);\n          if (countryData.country) {\n            if (isSelected) {\n              if (this.brushedCountries.includes(countryData.id)) {\n                return 'rgb(253, 255, 181)';\n              } else {\n                return 'rgb(150, 150, 150)';\n              }\n            } else {\n              if (this.brushedCountries.includes(countryData.id)) {\n                return this.getColorForCountry(countryData);\n              } else {\n                return 'rgb(130, 130, 130)';\n              }\n            }\n          } else {\n            return 'darkgrey';\n          }\n        })\n        .on('click', (event, d) => this.handleBarClick(d.id))\n        .on('mouseover', (event, d) => {\n          let landCoverTemp;\n          let carbonStocksTemp;\n          let disastersFreqTemp;\n          const hoveringLandCover = this.landCover.find(country => country.id === d.id);\n          const hoveringCarbonStocks = this.carbonStocks.find(country => country.id === d.id);\n          const hoveringDisasters = this.disastersFreq.find(country => country.id === d.id)\n          if (hoveringLandCover) {\n            landCoverTemp = hoveringLandCover.value === 0 ? 'No Data' : hoveringLandCover.value.toFixed(4);\n          } else {\n            landCoverTemp = 'No Data';\n          }\n          if (hoveringCarbonStocks) {\n            carbonStocksTemp = hoveringCarbonStocks.value === 0 ? 'No Data' : hoveringCarbonStocks.value.toFixed(4);\n          } else {\n            carbonStocksTemp = 'No Data';\n          }\n          if (hoveringDisasters) {\n            disastersFreqTemp = hoveringDisasters.value === -1 ? 'No Data' : hoveringDisasters.value;\n          } else {\n            disastersFreqTemp = 'No Data';\n          }\n          tooltip.transition()\n            .duration(200)\n            .style('opacity', 1);\n\n\n          tooltip.html(`\n            <table>\n              <tr><td class=\"label\">Country:</td>         <td class=\"value\">${d.country}</td></tr>\n              <tr><td class=\"label\">CarbonStocks:</td>        <td class=\"value\">${carbonStocksTemp}</td></tr>\n              <tr><td class=\"label\">LandCoverIndex:</td>     <td class=\"value\">${landCoverTemp}</td></tr>\n              <tr><td class=\"label\">disastersFreq:</td>     <td class=\"value\">${disastersFreqTemp}</td></tr>\n            </table>\n          `)\n            .style('left', (event.clientX - 275) + 'px')\n            .style('top', (event.clientY - 400) + 'px');\n        })\n        .on('mouseout', () => {\n          tooltip.transition().duration(500).style('opacity', 0);\n          \n        });\n    },\n\n    handleBarClick(countryId) {\n      const isSelected = this.selectedCountries.includes(countryId);\n      if (!isSelected) {\n        this.$store.commit('changeSelectedCountries', countryId);\n      } else {\n        this.$store.commit('removeSelectedCountry', countryId);\n      }\n    },\n    getColorForCountry(countryData) {\n      const colors = [\n        \"rgb(230, 230, 230)\",\n        \"rgb(220, 183, 210)\", // 0 1 \n        \"rgb(211, 146, 194)\", // 0 0 \n        \"rgb(195, 238, 199)\", // 1 2 \n        \"rgb(151, 185, 199)\", \n        \"rgb(168, 140, 191)\", // 1 0 \n        \"rgb(148, 221, 166)\", // 2 2 \n        \"rgb(129, 186, 162)\", // 2 1 \n        \"rgb(107, 120, 155)\",\n      ];\n      const landCoverData = this.landCover.find(country => country.id === countryData.id);\n      const carbonStocksData = this.carbonStocks.find(country => country.id === countryData.id);\n      if (!landCoverData || !carbonStocksData) {\n        // Handle the case where data is not available for the country\n        return 'darkgrey';\n      }\n      let landCoverCategory = this.getLandCoverCategory(landCoverData.value);\n      let carbonStocksCategory = this.getCarbonStocksCategory(carbonStocksData.value);\n\n      if (carbonStocksCategory === 'low' && landCoverCategory === 'low') return colors[0];\n      if (carbonStocksCategory === 'low' && landCoverCategory === 'medium') return colors[1];\n      if (carbonStocksCategory === 'low' && landCoverCategory === 'high') return colors[2];\n      if (carbonStocksCategory === 'medium' && landCoverCategory === 'low') return colors[3];\n      if (carbonStocksCategory === 'medium' && landCoverCategory === 'medium') return colors[4];\n      if (carbonStocksCategory === 'medium' && landCoverCategory === 'high') return colors[5];\n      if (carbonStocksCategory === 'high' && landCoverCategory === 'low') return colors[6];\n      if (carbonStocksCategory === 'high' && landCoverCategory === 'medium') return colors[7];\n      if (carbonStocksCategory === 'high' && landCoverCategory === 'high') return colors[8];\n    },\n    getLandCoverCategory(landCover) {\n      const xFirstTick = this.landCoverMin + (this.landCoverMax - this.landCoverMin) / 3;\n      const xSecondTick = this.landCoverMin + 2 * (this.landCoverMax - this.landCoverMin) / 3;\n      const xThresholds = [xFirstTick, xSecondTick];\n      if (landCover <= xThresholds[0]) return 'low';\n      if (landCover <= xThresholds[1]) return 'medium';\n      return 'high';\n    },\n\n    getCarbonStocksCategory(carbonStocks) {\n      const yFirstTick = this.carbonStocksMin + (this.carbonStocksMax - this.carbonStocksMin) / 3;\n      const ySecondTick = this.carbonStocksMin + 2 * (this.carbonStocksMax - this.carbonStocksMin) / 3;\n      const yThresholds = [yFirstTick, ySecondTick];\n      if (carbonStocks <= yThresholds[0]) return 'low';\n      if (carbonStocks <= yThresholds[1]) return 'medium';\n      return 'high';\n    },\n\n    addBrush() {\n      this.brush = d3.brushX()\n        .extent([[0,0], [this.svgWidth - this.svgPadding.left - this.svgPadding.right, \n          this.svgHeight - this.svgPadding.bottom - this.svgPadding.top]])\n        .on('end', this.onBrush);\n      \n      d3.select(this.$refs.brushGroup)\n        .attr('class', 'brush')\n        .call(this.brush);\n    },\n    // get states in brush\n    onBrush(event) {\n      var selection = event.selection;\n      var brushedIds = [];\n      var xScale;\n      if (this.zoomedXScale) {\n        xScale = this.zoomedXScale;\n      } else {\n        xScale = this.xScale\n      }\n\n      if (selection) {\n        const [x0, x1] = selection;\n        \n        // Filter the data based on the brushed selection\n        brushedIds = this.filteredData\n          .filter(d => {\n            const x = xScale(d.country);\n            return x >= x0 && x <= x1;\n          })\n          .map(d => d.id);\n      }\n      this.drawBars(xScale); // Redraw bars with updated data\n        \n      var idleTimeout;\n      if (!selection) {\n        if (!idleTimeout) return idleTimeout = setTimeout(() => {\n          idleTimeout = null\n        }, 1) \n      }\n      d3.select('#bar-svg').select(\".brush\").call(this.brush.move, null)\n\n      this.$store.commit('changeBrushedCountries', brushedIds);\n    },\n    \n  },\n  computed: {\n    \n    filteredData() {\n      let filtered = this.disastersFreq.filter(d => d.value > 0);\n      if (this.brushedCountries.length > 0) {\n        filtered = filtered.filter(d => this.brushedCountries.includes(d.id));\n      }\n      filtered.sort((a, b) => d3.descending(+a.value, +b.value));\n      return filtered;\n    },\n    landCover: {\n      get() {\n        return this.$store.getters.landCover;\n      }\n    },\n    carbonStocks: {\n      get() {\n        return this.$store.getters.carbonStocks;\n      }\n    },\n    disastersFreq: {\n      get() {\n        return this.$store.getters.disastersFreq;\n      }\n    },\n    dataMax() {\n      return 40;\n    },\n    dataMin() {\n      return 0;\n    },\n    carbonStocksMax() {\n      return 200;\n    },\n    carbonStocksMin() {\n      return 0;\n    },\n    landCoverMax() {\n      return 130;\n    },\n    landCoverMin() {\n      return 70;\n    },\n    xScale() {\n      return d3.scaleBand()\n        .rangeRound([0, this.svgWidth - this.svgPadding.left - this.svgPadding.right]).padding(0.15)\n        .domain(this.filteredData.map((d) => d.country));\n    },\n    yScale() {\n      return d3.scaleLinear()\n        .rangeRound([this.svgHeight - this.svgPadding.top - this.svgPadding.bottom, 0])\n        .domain([this.dataMin > 0 ? 0 : this.dataMin, this.dataMax]);\n    },\n    selectedCountries: {\n      get() {\n        return this.$store.getters.selectedCountries;\n      }\n    },\n    brushedCountries: {\n      get() {\n        return this.$store.getters.brushedCountries;\n      }\n    },\n  },\n  watch: {\n    landCover: {\n      handler() {\n        this.drawChart(this.xScale);\n      },\n      deep: true,\n    },\n    carbonStocks: {\n      handler() {\n        this.drawChart(this.xScale);\n      },\n      deep: true,\n    },\n    disastersFreq: {\n      handler() {\n        this.drawChart(this.xScale);\n      },\n      deep: true,\n    },\n    brushedCountries: {\n      handler() {\n        this.drawChart(this.xScale);\n      },\n      deep: true,\n    },\n    selectedCountries: {\n      handler() {\n        if (this.zoomedXScale) {\n          this.drawChart(this.zoomedXScale);\n        } else {\n          this.drawChart(this.xScale);\n        }\n      },\n      deep: true,\n    }\n  },\n}\n</script>\n\n<style>\n\n.bar:hover {\n  border-width: 1;\n  border-color: rgb(253, 255, 181);\n  opacity: 0.7;\n}\n\n\n</style>\n"],"mappings":"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"}]}