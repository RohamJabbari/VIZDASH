{"remainingRequest":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/thread-loader/dist/cjs.js!/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/babel-loader/lib/index.js!/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/src/components/Scatterplot_2.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/src/components/Scatterplot_2.vue","mtime":1705768152791},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/babel.config.js","mtime":1703791909061},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/cache-loader/dist/cjs.js","mtime":1705744300535},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/thread-loader/dist/cjs.js","mtime":1705744300535},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/babel-loader/lib/index.js","mtime":1705744300565},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/cache-loader/dist/cjs.js","mtime":1705744300535},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/vue-loader/lib/index.js","mtime":1705744299123}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["d3","name","props","data","svgWidth","window","innerWidth","svgHeight","innerHeight","zoomedXScale","zoomedYScale","svgPadding","top","right","bottom","left","significantChange","mounted","drawChart","xScale","yScale","addBrush","initialize","methods","localbrushedCountries","filteredData","forEach","d","push","id","resetZoom","drawXAxis","drawYAxis","select","$refs","chartGroup","attr","drawPoints","brush","extent","on","onBrush","brushGroup","call","event","selection","x0","x1","y0","y1","idleTimeout","setTimeout","invert","scaleLinear","domain","range","energyGeneration","energyCapacity","move","xAxisGroup","axisX","axisBottom","selectAll","style","append","text","yAxisGroup","axisY","axisLeft","remove","pointsGroup","tooltip","transition","duration","xRange","yRange","inBoundData","filter","cx","renewable","cy","nonRenewable","join","enter","update","exit","raise","renewableEnergyTemp","toFixed","nonRenewableEnergyTemp","html","country","clientX","clientY","sumEnergyCapacityByCountry","summedData","reduce","acc","item","capacity","parseFloat","Object","values","computed","combinedData","totalRenewable","ec","accumulator","current","valueToAdd","Number","value","totalNonRenewable","renewableArray","nonRenewableArray","combined","map","rn","totalNonRenewableData","find","nr","get","$store","getters","nonRenewableEnergyMax","maxNonRenewable","Math","max","roundedMax","ceil","nonRenewableEnergyMin","minNonRenewable","min","renewableEnergyMax","maxRenewable","renewableEnergyMin","minRenewable","rangeRound","watch","handler","deep"],"sources":["src/components/Scatterplot_2.vue"],"sourcesContent":["<template>\n  <div class=\"vis-component\" ref=\"chart\">\n    <h6><h5>Renewable Energy Transition Project Identification: (Data for 2000 - 2022)</h5></h6>\n    <svg id=\"scatter2-svg\" :width=\"svgWidth\" :height=\"svgHeight\" @dblclick=\"resetZoom\">\n      <g class=\"chart-group\" ref=\"chartGroup\">\n        <g class=\"grid-background\" ref=\"gridBackground\"></g>\n        <g class=\"brush-group\" ref=\"brushGroup\"></g>\n        <g class=\"axis axis-x\" ref=\"axisX\"></g>\n        <g class=\"axis axis-y\" ref=\"axisY\"></g>\n        <g class=\"points-group\" ref=\"pointsGroup\"></g>\n      </g>\n    </svg>\n    \n    <div id=\"tooltip\" class=\"tooltip\" style=\"opacity:0;\"></div>\n  </div>\n</template>\n\n<script>\n\nimport * as d3 from 'd3';\n\nexport default {\n  name: 'Scatterplot_1',\n  props: {\n  },\n  data() {\n    const svgWidth = window.innerWidth * 4 / 12;\n    const svgHeight = window.innerHeight * 0.35;\n    return {\n      zoomedXScale: null,\n      zoomedYScale: null,\n      svgWidth: svgWidth,\n      svgHeight: svgHeight,\n      svgPadding: {\n        top: 5, right: 15, bottom: 60, left: 60,\n      },\n      significantChange: false,\n    }\n  },\n  mounted() {\n    this.drawChart(this.xScale, this.yScale);\n    this.addBrush();\n    this.initialize();\n    // this.paintChart(this.xScale, this.yScale);\n\n  },\n  methods: {\n    initialize() {\n      var localbrushedCountries = [];\n      this.filteredData.forEach(d => localbrushedCountries.push(d.id));\n    },\n    resetZoom() {\n      this.zoomedXScale = null;\n      this.zoomedYScale = null;\n      // this.paintChart(this.xScale, this.yScale);\n      this.drawChart(this.xScale, this.yScale);\n      this.initialize()\n    },\n    // called for each updage\n    drawChart(xScale, yScale) {\n      xScale = xScale || this.xScale;\n      yScale = yScale || this.yScale;\n\n      // Update axes\n      this.drawXAxis(xScale);\n      this.drawYAxis(yScale);\n      \n      d3.select(this.$refs.chartGroup)\n        .attr('transform', `translate(${this.svgPadding.left},${this.svgPadding.top})`);\n      this.drawPoints(xScale, yScale);\n      // this.paintChart(xScale, yScale);\n    },\n    // brush for showing on choroplethmap\n    addBrush() {\n      this.brush = d3.brush()\n        .extent([[0,0], [this.svgWidth - this.svgPadding.left - this.svgPadding.right, \n          this.svgHeight - this.svgPadding.bottom - this.svgPadding.top]])\n        .on('end', this.onBrush);\n      \n      d3.select(this.$refs.brushGroup)\n        .attr('class', 'brush')\n        .call(this.brush);\n    },\n    // get states in brush\n    onBrush(event) {\n      this.significantChange = true;\n      var selection = event.selection;\n      var localbrushedCountries = [];\n      var x0,x1,y0,y1,idleTimeout;\n      if (!selection) {\n        // Reset zoom and clear brushed countries\n        this.filteredData.forEach(d => localbrushedCountries.push(d.id));\n        if (!idleTimeout) return idleTimeout = setTimeout(() => {\n          idleTimeout = null\n        }, 1)    \n      } else {\n        // Calculate new scales for zoom\n        if (this.zoomedXScale) {\n          x0 = this.zoomedXScale.invert(selection[0][0]);\n          x1 = this.zoomedXScale.invert(selection[1][0]);\n          y0 = this.zoomedYScale.invert(selection[1][1]);\n          y1 = this.zoomedYScale.invert(selection[0][1]);\n        } else {\n          x0 = this.xScale.invert(selection[0][0]);\n          x1 = this.xScale.invert(selection[1][0]);\n          y0 = this.yScale.invert(selection[1][1]);\n          y1 = this.yScale.invert(selection[0][1]);\n        }\n\n        this.zoomedXScale = d3.scaleLinear().domain([x0, x1]).range([0, this.svgWidth - this.svgPadding.left - this.svgPadding.right]);\n        this.zoomedYScale = d3.scaleLinear().domain([y0, y1]).range([this.svgHeight - this.svgPadding.top - this.svgPadding.bottom, 0]);\n\n        this.drawChart(this.zoomedXScale, this.zoomedYScale);\n\n        this.filteredData.forEach(d => {\n          if (d.energyGeneration >= y0 && d.energyGeneration <= y1 && d.energyCapacity >= x0 && d.energyCapacity <= x1) {\n            localbrushedCountries.push(d.id);\n          }\n        });\n        \n      }\n\n      // this.paintChart(this.zoomedXScale, this.zoomedYScale);\n\n      d3.select('#scatter2-svg').select(\".brush\").call(this.brush.move, null);\n    },\n    drawXAxis(xScale) {\n      const xAxisGroup = d3.select(this.$refs.axisX)\n        .attr('transform', `translate(0, ${this.svgHeight - this.svgPadding.top - this.svgPadding.bottom})`)\n        .call(d3.axisBottom(xScale));\n\n      // Rotate the ticks\n      xAxisGroup.selectAll(\".tick text\")\n      .attr(\"transform\", \"rotate(50)\")\n      .attr(\"x\", 9)\n      .attr(\"y\", 0)\n      .style(\"text-anchor\", \"start\");\n\n      // Position the axis label\n      xAxisGroup.append('text')\n      .attr('class', 'x-axis-label')\n      .attr('x', this.svgWidth / 2)\n      .attr('y', this.svgPadding.bottom - 5)\n\n      \n      .style('text-anchor', 'middle')\n      .style('fill', 'black')\n      .style('font-size', '12px')\n      .text('Renewable Energy Capacity');\n    },\n    drawYAxis(yScale) {\n      const yAxisGroup = d3.select(this.$refs.axisY)\n        .attr('transform', `translate(0, 0)`)\n        .call(d3.axisLeft(yScale))\n        .style('font-size', '10px');\n\n      // Rotate the ticks\n      yAxisGroup.selectAll('.tick text')\n        .attr('transform', 'rotate(-50)')\n        .style('text-anchor', 'end');\n\n      // Remove any existing y-axis label before adding a new one\n      yAxisGroup.selectAll('.y-axis-label').remove();\n\n      // Add new y-axis label\n      yAxisGroup.append('text')\n        .attr('class', 'y-axis-label')\n        .attr('transform', 'rotate(-90)')\n        .attr('y', -this.svgPadding.left + 15)\n        .attr('x', -this.svgHeight / 2) // Position in the middle of y-axis\n        .style('text-anchor', 'middle') // Center the text on its x position\n        .style('fill', 'black')\n        .style('font-size', '12px')\n        .text('Non-Renewable Energy Capacity');\n    },\n\n\n    // add country points on scatterplot\n    drawPoints(xScale, yScale) {\n      const pointsGroup = d3.select(this.$refs.pointsGroup);\n      const tooltip = d3.select(\"#tooltip\");\n      const transition = this.significantChange? d3.transition().duration(750) : d3.transition().duration(0);\n\n      const xRange = xScale.range();\n      const yRange = yScale.range();\n      const inBoundData = this.filteredData.filter(d => {\n\n        const cx = xScale(d.renewable);\n        const cy = yScale(d.nonRenewable);\n        \n\n\n        return cx >= xRange[0] && cx <= xRange[1] && cy <= yRange[0] && cy >= yRange[1];\n      });\n      pointsGroup.selectAll('.point')\n        .data(inBoundData, function(d) { return d.id; })\n        .join(\n          enter => enter.append('circle')\n                        .attr('class', 'point')\n                        .attr('cx', d => xScale(d.renewable))\n                        .attr('cy', this.svgHeight - this.svgPadding.bottom) // start from bottom\n                        .attr('r', 6) // start from zero radius\n                        .call(enter => enter.transition(transition)\n                            .attr('cy', d => yScale(d.nonRenewable))\n                            .attr('r', 6)),\n          update => update.call(update => update.transition(transition)\n                              .attr('cx', d => xScale(d.renewable))\n                              .attr('cy', d => yScale(d.nonRenewable))),\n          exit => exit.call(exit => exit.transition(transition)\n                            .attr('cy', this.svgHeight - this.svgPadding.bottom)\n                            .attr('r', 0)\n                            .remove())\n        )\n        .attr('fill', \"rgb(1, 39, 39)\")\n        .on('mouseover', function(event, d) {\n          d3.select(this)\n            .raise()\n            .attr('stroke', 'green')\n            .attr('stroke-width', 2);\n          let renewableEnergyTemp = d.renewable === 0 ? 'No Data' : d.renewable.toFixed(2);\n          let nonRenewableEnergyTemp = d.nonRenewable === 0 ? 'No Data' : d.nonRenewable.toFixed(2);\n          tooltip.transition()\n            .duration(200)\n            .style('opacity', 1);\n          tooltip.html(`\n            <table>\n              <tr><td class=\"label\">Country:</td>         <td class=\"country_value\">${d.country}</td></tr>\n              <tr><td class=\"label\">Non-Renewable Energy:</td>     <td class=\"value\">${nonRenewableEnergyTemp}</td></tr>\n              <tr><td class=\"label\">Renewable Energy:</td>        <td class=\"value\">${renewableEnergyTemp}</td></tr>\n            </table>\n          `)\n          .style('left', (event.clientX - 275) + 'px')\n          .style('top', (event.clientY - 100) + 'px');\n        })\n        .on('mouseout', function() {\n          d3.select(this)\n            .attr('r', 6)\n            .attr('stroke', 'none')\n            .attr('stroke-width', 0);\n          tooltip.transition()\n            .duration(500)\n            .style('opacity', 0);\n        })\n        \n      this.significantChange = false;\n    },\n      \n    // coloring the grid\n    // paintChart(xScale, yScale) {\n    //   xScale = xScale || this.xScale;\n    //   yScale = yScale || this.yScale;\n    //   const background = d3.select(this.$refs.gridBackground);\n    //   background.selectAll('rect').remove()\n    //   background.selectAll('#plot-area-clip-background').remove()\n    //   const colors = [\n    //     \"rgb(230, 230, 230)\",\n    //     \"rgb(220, 220, 220)\",\n    //     \"rgb(230, 230, 230)\",\n    //     \"rgb(220, 220, 220)\", \n    //     \"rgb(230, 230, 230)\", \n    //     \"rgb(220, 220, 220)\",\n    //     \"rgb(230, 230, 230)\", \n    //     \"rgb(220, 220, 220)\",\n    //     \"rgb(230, 230, 230)\",\n    //   ];\n    //   background.append(\"defs\").append(\"clipPath\")\n    //     .attr(\"id\", \"plot-area-clip-background\")\n    //     .append(\"rect\")\n    //     .attr(\"width\", this.svgWidth - this.svgPadding.left - this.svgPadding.right)\n    //     .attr(\"height\", this.svgHeight - this.svgPadding.top - this.svgPadding.bottom);\n    //   const xFirstTick = this.renewableEnergyMin + (this.renewableEnergyMax - this.renewableEnergyMin)/3;\n    //   const xSecondTick = this.renewableEnergyMin + 2*(this.renewableEnergyMax - this.renewableEnergyMin)/3;\n    //   const xValues = [this.renewableEnergyMin, xFirstTick, xSecondTick, this.renewableEnergyMax];\n    //   const yFirstTick = this.nonRenewableEnergyMin + (this.nonRenewableEnergyMax - this.nonRenewableEnergyMin)/3;\n    //   const ySecondTick = this.nonRenewableEnergyMin + 2*(this.nonRenewableEnergyMax - this.nonRenewableEnergyMin)/3;\n    //   const yValues = [this.nonRenewableEnergyMin, yFirstTick, ySecondTick,this.nonRenewableEnergyMax];\n    //   for (let i = 0; i < yValues.length - 1; i++) {\n    //     for (let j = 0; j < xValues.length - 1; j++) {\n    //       background.append('rect')\n    //         .attr('x', xScale(xValues[j]))\n    //         .attr('y', yScale(yValues[i+1]))\n    //         .attr(\"clip-path\", \"url(#plot-area-clip-background)\")\n    //         .attr('fill', colors[j + i * 3])\n    //         .attr('opacity', 0) // Start with an opacity of 0 for the transition\n    //         .attr('width', xScale(xValues[j+1]) - xScale(xValues[j]))\n    //         .attr('height', yScale(yValues[i]) - yScale(yValues[i+1]))\n    //         .attr('opacity', 1);\n    //     }\n    //   }\n    // },\n    sumEnergyCapacityByCountry(data) {\n      // Assuming each entry in `data` has a `country` field and a `capacity` field\n      const summedData = data.reduce((acc, item) => {\n        const country = item.country;\n        if (!acc[country]) {\n          acc[country] = { ...item, capacity: 0 }; // copy all properties\n        }\n        acc[country].capacity += parseFloat(item.capacity) || 0;\n        return acc;\n      }, {});\n\n      // Convert the object back into an array\n      return Object.values(summedData);\n    },\n  },\n  computed: {\n    filteredData() {\n      return this.combinedData.filter(d => d.energyCapacity !== 0 && d.energyCapacity !== 0);\n    },\n    combinedData() {\n      let totalRenewable = this.energyCapacity\n        .filter(ec => ec['energyType'] === 'Total Renewable')\n        .filter(ec => ec.id)\n        .reduce((accumulator, current) => {\n          const valueToAdd = Number(current.value) || 0;\n          if (accumulator[current.id]) {\n            accumulator[current.id].value += valueToAdd;\n          } else {\n            accumulator[current.id] = {\n              id: current.id,\n              country: current.country,\n              value: valueToAdd\n            };\n          }\n          return accumulator;\n          }, {});\n      let totalNonRenewable = this.energyCapacity\n        .filter(ec => ec['energyType'] === 'Total Non-Renewable')\n        .filter(ec => ec.id)\n        .reduce((accumulator, current) => {\n          const valueToAdd = Number(current.value) || 0;\n          if (accumulator[current.id]) {\n            accumulator[current.id].value += valueToAdd;\n          } else {\n            accumulator[current.id] = {\n              id: current.id,\n              country: current.country,\n              value: valueToAdd\n            };\n          }\n          return accumulator;\n          }, {});\n      \n      let renewableArray = Object.values(totalRenewable);\n      let nonRenewableArray = Object.values(totalNonRenewable);\n      let combined = renewableArray.map(rn => {\n        let totalNonRenewableData = nonRenewableArray.find(nr => nr.id === rn.id);\n        return {\n          id: rn.id,\n          country: rn.country,\n          renewable: rn.value,\n          nonRenewable: totalNonRenewableData? totalNonRenewableData.value: 0,\n        };\n      });\n      return combined;\n    },\n    energyCapacity: {\n      get() {\n        return this.$store.getters.energyCapacity;\n      }\n    },\n    energyGeneration: {\n      get() {\n        return this.$store.getters.energyGeneration;\n      }\n    },\n    nonRenewableEnergyMax() {\n      const maxNonRenewable = Math.max(...this.filteredData.map(d => d.nonRenewable));\n      let roundedMax;\n      if (maxNonRenewable > 1000000) {\n        roundedMax = Math.ceil(maxNonRenewable / 100000) * 100000;\n      } else if (maxNonRenewable > 100000) {\n        roundedMax = Math.ceil(maxNonRenewable / 10000) * 10000;\n      } else if (maxNonRenewable > 10000) {\n        roundedMax = Math.ceil(maxNonRenewable / 1000) * 1000;\n      } else {\n        // No rounding needed\n        roundedMax = maxNonRenewable;\n      }\n      return roundedMax;\n      // return 1300000;\n    },\n    nonRenewableEnergyMin() {\n      const minNonRenewable = Math.min(...this.filteredData.map(d => d.nonRenewable));\n      return minNonRenewable;\n    },\n    renewableEnergyMax() {\n      const maxRenewable = Math.max(...this.filteredData.map(d => d.renewable));\n      let roundedMax;\n      if (maxRenewable > 1000000) {\n        roundedMax = Math.ceil(maxRenewable / 100000) * 100000;\n      } else if (maxRenewable > 100000) {\n        roundedMax = Math.ceil(maxRenewable / 10000) * 10000;\n      } else if (maxRenewable > 10000) {\n        roundedMax = Math.ceil(maxRenewable / 1000) * 1000;\n      } else {\n        // No rounding needed\n        roundedMax = maxRenewable;\n      }\n      return roundedMax;\n      // return 700000;\n    },\n    renewableEnergyMin() {\n      const minRenewable = Math.min(...this.filteredData.map(d => d.renewable));\n      \n      return minRenewable;\n    },\n    xScale() {\n      return d3.scaleLinear()\n        .rangeRound([0, this.svgWidth - this.svgPadding.left - this.svgPadding.right])\n        .domain([this.renewableEnergyMin, this.renewableEnergyMax]);\n    },\n    yScale() {\n      return d3.scaleLinear()\n        .rangeRound([this.svgHeight - this.svgPadding.top - this.svgPadding.bottom, 0])\n        .domain([this.nonRenewableEnergyMin, this.nonRenewableEnergyMax]);\n    },\n  },\n  watch: {\n    energyCapacity: {\n      handler() {\n        let xScale = this.zoomedXScale || this.xScale;\n        let yScale = this.zoomedYScale || this.yScale;\n        this.drawChart(xScale, yScale);\n      },\n      deep: true,\n    },\n    energyGeneration: {\n      handler() {\n        let xScale = this.zoomedXScale || this.xScale;\n        let yScale = this.zoomedYScale || this.yScale;\n        this.drawChart(xScale, yScale);\n      },\n      deep: true,\n    },\n    // filteredData: {\n    //   handler() {\n    //     this.initialize();\n    //   },\n    //   deep: true,\n    // },\n    // xScale: {\n    //   handler() {\n    //     let xScale = this.zoomedXScale || this.xScale;\n    //     let yScale = this.zoomedYScale || this.yScale;\n    //     // this.paintChart(xScale, yScale);\n    //   },\n    //   deep: true,\n    // }\n  },\n}\n</script>\n\n<style>\n</style>\n"],"mappings":"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"}]}