{"remainingRequest":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/thread-loader/dist/cjs.js!/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/babel-loader/lib/index.js!/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/src/components/Scatterplot_1.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/src/components/Scatterplot_1.vue","mtime":1705768150298},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/babel.config.js","mtime":1703791909061},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/cache-loader/dist/cjs.js","mtime":1705744300535},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/thread-loader/dist/cjs.js","mtime":1705744300535},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/babel-loader/lib/index.js","mtime":1705744300565},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/cache-loader/dist/cjs.js","mtime":1705744300535},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/vue-loader/lib/index.js","mtime":1705744299123}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["d3","name","props","data","svgWidth","window","innerWidth","svgHeight","innerHeight","zoomedXScale","zoomedYScale","svgPadding","top","right","bottom","left","mounted","paintChart","xScale","yScale","drawChart","drawXAxis","drawYAxis","addBrush","initialize","select","on","event","target","node","removeSelection","methods","$store","commit","localbrushedCountries","filteredData","forEach","d","push","id","resetZoom","$refs","chartGroup","attr","drawPoints","brush","extent","onBrush","brushGroup","call","filteredPoints","filter","brushedCountries","includes","selection","x0","x1","y0","y1","idleTimeout","setTimeout","invert","scaleLinear","domain","range","carbonStocks","landCover","move","xAxisGroup","axisX","axisBottom","style","xAxisText","selectAll","enter","append","merge","text","yAxisGroup","axisY","axisLeft","yAxisText","pointsGroup","console","log","tooltip","transition","duration","sort","a","b","aSelected","selectedCountries","bSelected","xRange","yRange","inBoundData","cx","cy","join","update","exit","remove","raise","landCoverTemp","toFixed","carbonStocksTemp","disastersFreqTemp","disastersFreq","html","country","clientX","clientY","handleClick","countryId","isSelected","checkVisibility","isWithinBounds","background","gridBackground","colors","xFirstTick","landCoverMin","landCoverMax","xSecondTick","xValues","yFirstTick","carbonStocksMin","carbonStocksMax","ySecondTick","yValues","i","length","j","computed","combinedData","combined","map","cs","landCoverData","find","disastersFreqData","value","get","getters","rangeRound","watch","handler","deep"],"sources":["src/components/Scatterplot_1.vue"],"sourcesContent":["<template>\n  <div class=\"vis-component\" ref=\"chart\">\n    <h6>Carbon Stocks / Land Cover Information per Country</h6>\n    <svg id=\"scatter1-svg\" :width=\"svgWidth\" :height=\"svgHeight\" @dblclick=\"resetZoom\">\n      <g class=\"chart-group\" ref=\"chartGroup\">\n        <g class=\"grid-background\" ref=\"gridBackground\"></g>\n        <g class=\"brush-group\" ref=\"brushGroup\"></g>\n        <g class=\"axis axis-x\" ref=\"axisX\"></g>\n        <g class=\"axis axis-y\" ref=\"axisY\"></g>\n        <g class=\"points-group\" ref=\"pointsGroup\"></g>\n      </g>\n    </svg>\n    \n    <div id=\"tooltip\" class=\"tooltip\" style=\"opacity:0;\"></div>\n  </div>\n</template>\n\n<script>\n\nimport * as d3 from 'd3';\n\nexport default {\n  name: 'Scatterplot_1',\n  props: {\n  },\n  data() {\n    const svgWidth = window.innerWidth * 4 / 12;\n    const svgHeight = window.innerHeight * 0.35;\n    return {\n      zoomedXScale: null,\n      zoomedYScale: null,\n      svgWidth: svgWidth,\n      svgHeight: svgHeight,\n      svgPadding: {\n        top: 5, right: 15, bottom: 60, left: 60,\n      },\n    }\n  },\n  mounted() {\n    this.paintChart(this.xScale, this.yScale);\n    this.drawChart(this.xScale, this.yScale);\n    this.drawXAxis(this.xScale);\n    this.drawYAxis(this.yScale);\n    this.addBrush();\n    this.initialize();\n\n    d3.select('#scatter1-svg').on('click', (event) => {\n      if (event.target === d3.select('#scatter1-svg').node()) {\n        this.removeSelection();\n      }\n    });\n  },\n  methods: {\n    removeSelection() {\n      this.$store.commit('removeSelectedCountries');\n    },\n    initialize() {\n      var localbrushedCountries = [];\n      this.filteredData.forEach(d => localbrushedCountries.push(d.id));\n      this.$store.commit('changeBrushedCountries', localbrushedCountries);\n    },\n    resetZoom() {\n      this.zoomedXScale = null;\n      this.zoomedYScale = null;\n      this.paintChart(this.xScale, this.yScale);\n      this.drawChart(this.xScale, this.yScale);\n      this.initialize()\n    },\n    // called for each updage\n    drawChart(xScale, yScale) {\n      xScale = xScale || this.xScale;\n      yScale = yScale || this.yScale;\n\n      // Update axes\n      this.drawXAxis(xScale);\n      this.drawYAxis(yScale);\n      \n      d3.select(this.$refs.chartGroup)\n        .attr('transform', `translate(${this.svgPadding.left},${this.svgPadding.top})`);\n      this.drawPoints(xScale, yScale);\n    },\n    // brush for showing on choroplethmap\n    addBrush() {\n      this.brush = d3.brush()\n        .extent([[0,0], [this.svgWidth - this.svgPadding.left - this.svgPadding.right, \n          this.svgHeight - this.svgPadding.bottom - this.svgPadding.top]])\n        .on('end', this.onBrush);\n      \n      d3.select(this.$refs.brushGroup)\n        .attr('class', 'brush')\n        .call(this.brush);\n    },\n    // get states in brush\n    onBrush(event) {\n      const filteredPoints = this.filteredData.filter(d => this.brushedCountries.includes(d.id));\n      var selection = event.selection;\n      var localbrushedCountries = [];\n      \n      var x0,x1,y0,y1,idleTimeout;\n      if (!selection) {\n        filteredPoints.forEach(d => localbrushedCountries.push(d.id));\n        if (!idleTimeout) return idleTimeout = setTimeout(() => {\n          idleTimeout = null\n        }, 1);\n      } else {\n        // Calculate new scales for zoom\n        if (this.zoomedXScale) {\n          x0 = this.zoomedXScale.invert(selection[0][0]);\n          x1 = this.zoomedXScale.invert(selection[1][0]);\n          y0 = this.zoomedYScale.invert(selection[1][1]);\n          y1 = this.zoomedYScale.invert(selection[0][1]);\n        } else {\n          x0 = this.xScale.invert(selection[0][0]);\n          x1 = this.xScale.invert(selection[1][0]);\n          y0 = this.yScale.invert(selection[1][1]);\n          y1 = this.yScale.invert(selection[0][1]);\n        }\n\n        this.zoomedXScale = d3.scaleLinear().domain([x0, x1]).range([0, this.svgWidth - this.svgPadding.left - this.svgPadding.right]);\n        this.zoomedYScale = d3.scaleLinear().domain([y0, y1]).range([this.svgHeight - this.svgPadding.top - this.svgPadding.bottom, 0]);\n\n        // Redraw chart with new scales\n        this.drawChart(this.zoomedXScale, this.zoomedYScale);\n\n        // Filter brushed countries\n        filteredPoints.forEach(d => {\n          if (d.carbonStocks >= y0 && d.carbonStocks <= y1 && d.landCover >= x0 && d.landCover <= x1) {\n            localbrushedCountries.push(d.id);\n          }\n        });\n        \n      }\n\n      this.paintChart(this.zoomedXScale, this.zoomedYScale)\n\n      d3.select('#scatter1-svg').select(\".brush\").call(this.brush.move, null)\n\n      this.$store.commit('changeBrushedCountries', localbrushedCountries);\n    },\n    // X-axis\n    drawXAxis(xScale) {\n      const xAxisGroup = d3.select(this.$refs.axisX)\n        .attr('transform', `translate(0, ${this.svgHeight - this.svgPadding.top - this.svgPadding.bottom})`)\n        .call(d3.axisBottom(xScale))\n        .style('font-size', '10');\n\n      const xAxisText = xAxisGroup.selectAll('.x-axis-label').data(['Land Cover Index (Compared to 2015)']);\n\n      xAxisText.enter()\n        .append('text')\n        .attr('class', 'x-axis-label')\n        .merge(xAxisText)\n        .attr('x', this.svgWidth/2 + this.svgPadding.left + this.svgPadding.right + 5)\n        .attr('y', this.svgPadding.bottom - 10)\n        .attr('text-anchor', 'end')\n        .style('fill', 'black')\n        .style('font-size', '14px')\n        .text(d => d);\n      },\n    // Y-axis\n    drawYAxis(yScale) {\n      const yAxisGroup = d3.select(this.$refs.axisY)\n        .attr('transform', `translate( 0, 0)`)\n        .call(d3.axisLeft(yScale))\n        .style('font-size', '10');\n        \n      const yAxisText = yAxisGroup.selectAll('.y-axis-label').data(['Carbon Stocks']);\n\n      yAxisText.enter()\n        .append('text')\n        .attr('class', 'y-axis-label')\n        .merge(yAxisText)\n        .attr('transform', 'rotate(-90)')\n        .attr('y', -this.svgPadding.left + 5)\n        .attr('x', -this.svgHeight/4 + this.svgPadding.top + this.svgPadding.bottom + 10)\n        .attr('dy', '0.71em')\n        .attr('text-anchor', 'end') \n        .attr('fill', 'black')\n        .style('font-size', '14px')\n        .text(\"Carbon Stocks Index (Compared to 1992)\");\n    },\n    // add country points on scatterplot\n    drawPoints(xScale, yScale) {\n      const pointsGroup = d3.select(this.$refs.pointsGroup);\n      const filteredPoints = this.filteredData.filter(d => this.brushedCountries.includes(d.id));\n      console.log('filtered');\n      console.log(filteredPoints);\n\n      const tooltip = d3.select(\"#tooltip\");\n      const transition = d3.transition().duration(750);\n      filteredPoints.sort((a, b) => {\n        const aSelected = this.selectedCountries.includes(a.id);\n        const bSelected = this.selectedCountries.includes(b.id);\n        return aSelected === bSelected ? 0 : aSelected ? 1 : -1;\n      });\n      const xRange = xScale.range();\n      const yRange = yScale.range();\n      const inBoundData = filteredPoints.filter(d => {\n\n        const cx = xScale(d.landCover);\n        const cy = yScale(d.carbonStocks);\n        \n\n\n        return cx >= xRange[0] && cx <= xRange[1] && cy <= yRange[0] && cy >= yRange[1];\n      });\n\n      console.log('bounded');\n      console.log(inBoundData);\n\n\n      pointsGroup.selectAll('.point')\n        .data(inBoundData, function(d) { return d.id; })\n        .join(\n          enter => enter.append('circle')\n                        .attr('class', 'point')\n                        .attr('cx', d => xScale(d.landCover))\n                        .attr('cy', this.svgHeight - this.svgPadding.bottom) // start from bottom\n                        .attr('r', 6) // start from zero radius\n                        .call(enter => enter.transition(transition)\n                            .attr('cy', d => yScale(d.carbonStocks))\n                            .attr('r', 6)),\n          update => update.call(update => update.transition(transition)\n                            .attr('cx', d => xScale(d.landCover))\n                            .attr('cy', d => yScale(d.carbonStocks))),\n          exit => exit.call(exit => exit.transition(transition)\n                            .attr('cy', this.svgHeight - this.svgPadding.bottom)\n                            .attr('r', 0)\n                            .remove())\n        )\n        .attr('fill', d => this.selectedCountries.includes(d.id) ? \"rgb(253, 255, 181)\" : \"rgb(1, 39, 39)\")\n        \n        .on('mouseover', function(event, d) {\n          d3.select(this)\n            .raise()\n            .attr('stroke', 'aqua')\n            .attr('stroke-width', 2);\n          let landCoverTemp = d.landCover === 0 ? 'No Data' : d.landCover.toFixed(2);\n          let carbonStocksTemp = d.carbonStocks === 0 ? 'No Data' : d.carbonStocks.toFixed(2);\n          let disastersFreqTemp = d.disastersFreq === -1 ? 'No Data' : d.disastersFreq;\n          tooltip.transition()\n            .duration(200)\n            .style('opacity', 1);\n          tooltip.html(`\n            <table>\n              <tr><td class=\"label\">Country:</td>         <td class=\"country_value\">${d.country}</td></tr>\n              <tr><td class=\"label\">Carbon Stocks:</td>     <td class=\"value\">${carbonStocksTemp}</td></tr>\n              <tr><td class=\"label\">Land Cover:</td>        <td class=\"value\">${landCoverTemp}</td></tr>\n              <tr><td class=\"label\">Disasters Frequency:</td>     <td class=\"value\">${disastersFreqTemp}</td></tr>\n            </table>\n          `)\n          .style('left', (event.clientX - 275) + 'px')\n          .style('top', (event.clientY - 100) + 'px');\n        })\n        .on('mouseout', function() {\n          d3.select(this)\n            .attr('r', 6)\n            .attr('stroke', 'none')\n            .attr('stroke-width', 0);\n          tooltip.transition()\n            .duration(500)\n            .style('opacity', 0);\n        })\n        .on('click', (event, d) => this.handleClick(d.id));\n\n    },\n    handleClick(countryId) {\n      const isSelected = this.selectedCountries.includes(countryId);\n      if (!isSelected) {\n        this.$store.commit('changeSelectedCountries', countryId);\n      } else {\n        this.$store.commit('removeSelectedCountry', countryId);\n      }\n    },\n    checkVisibility(d) {\n      console.log('Checking visibility for:', d);\n      const isWithinBounds = d.landCover <= 130 && d.carbonStocks <= 200;\n      return isWithinBounds ? 'visible' : 'hidden';\n    },\n\n      \n    // coloring the grid\n    paintChart(xScale, yScale) {\n      xScale = xScale || this.xScale;\n      yScale = yScale || this.yScale;\n      const background = d3.select(this.$refs.gridBackground);\n      background.selectAll('rect').remove()\n      background.selectAll('#plot-area-clip-background').remove()\n      const colors = [\n        \"rgb(230, 230, 230)\",\n        \"rgb(220, 183, 210)\", // 0 1 \n        \"rgb(211, 146, 194)\", // 0 0 \n        \"rgb(195, 238, 199)\", // 1 2 \n        \"rgb(151, 185, 199)\", \n        \"rgb(168, 140, 191)\", // 1 0 \n        \"rgb(148, 221, 166)\", // 2 2 \n        \"rgb(129, 186, 162)\", // 2 1 \n        \"rgb(107, 120, 155)\",\n      ];\n      background.append(\"defs\").append(\"clipPath\")\n        .attr(\"id\", \"plot-area-clip-background\")\n        .append(\"rect\")\n        .attr(\"width\", this.svgWidth - this.svgPadding.left - this.svgPadding.right)\n        .attr(\"height\", this.svgHeight - this.svgPadding.top - this.svgPadding.bottom);\n      const xFirstTick = this.landCoverMin + (this.landCoverMax - this.landCoverMin)/3;\n      const xSecondTick = this.landCoverMin + 2*(this.landCoverMax - this.landCoverMin)/3;\n      const xValues = [this.landCoverMin, xFirstTick, xSecondTick, this.landCoverMax];\n      const yFirstTick = this.carbonStocksMin + (this.carbonStocksMax - this.carbonStocksMin)/3;\n      const ySecondTick = this.carbonStocksMin + 2*(this.carbonStocksMax - this.carbonStocksMin)/3;\n      const yValues = [this.carbonStocksMin, yFirstTick, ySecondTick,this.carbonStocksMax];\n      for (let i = 0; i < yValues.length - 1; i++) {\n        for (let j = 0; j < xValues.length - 1; j++) {\n          background.append('rect')\n            .attr('x', xScale(xValues[j]))\n            .attr('y', yScale(yValues[i+1]))\n            .attr('width', (xScale(xValues[j+1]) - xScale(j)))\n            .attr('height', (yScale(yValues[i]) - yScale(yValues[i+1])))\n            .attr(\"clip-path\", \"url(#plot-area-clip-background)\")\n            .attr('fill', colors[j + i * 3])\n            .attr('opacity', 1);\n          background.append('rect')\n            .attr('x', xScale(xValues[j]))\n            .attr('y', yScale(yValues[i+1]))\n            .attr('width', 0)  // Start with a width of 0 for the transition\n            .attr('height', 0) // Start with a height of 0 for the transition\n            .attr(\"clip-path\", \"url(#plot-area-clip-background)\")\n            .attr('fill', colors[j + i * 3])\n            .attr('opacity', 0) // Start with an opacity of 0 for the transition\n            .attr('width', xScale(xValues[j+1]) - xScale(xValues[j]))\n            .attr('height', yScale(yValues[i]) - yScale(yValues[i+1]))\n            .attr('opacity', 1);\n        }\n      }\n    },\n  },\n  computed: {\n    filteredData() {\n      return this.combinedData.filter(d => d.landCover !== 0);\n    },\n    combinedData() {\n      let combined = this.carbonStocks.map(cs => {\n        let landCoverData = this.landCover.find(landCover => landCover.id === cs.id);\n        let disastersFreqData = this.disastersFreq.find(disastersFreq => disastersFreq.id === cs.id);\n        return {\n          id: cs.id,\n          country: cs.country,\n          carbonStocks: cs.value,\n          landCover: landCoverData ? landCoverData.value: 0,\n          disastersFreq: disastersFreqData ? disastersFreqData.value: -1\n        };\n      });\n      return combined;\n    },\n    landCover: {\n      get() {\n        return this.$store.getters.landCover;\n      }\n    },\n    carbonStocks: {\n      get() {\n        return this.$store.getters.carbonStocks;\n      }\n    },\n    disastersFreq: {\n      get() {\n        return this.$store.getters.disastersFreq;\n      }\n    },\n    carbonStocksMax() {\n      return 200;\n    },\n    carbonStocksMin() {\n      return 0;\n    },\n    landCoverMax() {\n      return 130;\n    },\n    landCoverMin() {\n      return 70;\n    },\n    xScale() {\n      return d3.scaleLinear()\n        .rangeRound([0, this.svgWidth - this.svgPadding.left - this.svgPadding.right])\n        .domain([this.landCoverMin, this.landCoverMax]);\n    },\n    yScale() {\n      return d3.scaleLinear()\n        .rangeRound([this.svgHeight - this.svgPadding.top - this.svgPadding.bottom, 0])\n        .domain([this.carbonStocksMin, this.carbonStocksMax]);\n    },\n    \n    brushedCountries: {\n      get() {\n        return this.$store.getters.brushedCountries;\n      }\n    },\n    selectedCountries: {\n      get() {\n        return this.$store.getters.selectedCountries;\n      }\n    }\n  },\n  watch: {\n    landCover: {\n      handler() {\n        let xScale = this.zoomedXScale || this.xScale;\n        let yScale = this.zoomedYScale || this.yScale;\n        this.drawChart(xScale, yScale);\n      },\n      deep: true,\n    },\n    carbonStocks: {\n      handler() {\n        let xScale = this.zoomedXScale || this.xScale;\n        let yScale = this.zoomedYScale || this.yScale;\n        this.drawChart(xScale, yScale);\n      },\n      deep: true,\n    },\n    disastersFreq: {\n      handler() {\n        let xScale = this.zoomedXScale || this.xScale;\n        let yScale = this.zoomedYScale || this.yScale;\n        this.drawChart(xScale, yScale);\n      },\n      deep: true,\n    },\n    selectedCountries: {\n      handler() {\n        this.drawChart(this.zoomedXScale, this.zoomedYScale);\n      },\n      deep: true,\n    },\n    filteredData: {\n      handler() {\n        this.initialize();\n      },\n      deep: true,\n    },\n    brushedCountries: {\n      handler() {\n        if (this.zoomedXScale && this.zoomedYScale) {\n          this.drawPoints(this.zoomedXScale, this.zoomedYScale);\n        } else {\n          this.drawPoints(this.xScale, this.yScale);\n        }\n      },\n      deep: true,\n    }\n  },\n}\n</script>\n\n<style>\n</style>\n"],"mappings":"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"}]}