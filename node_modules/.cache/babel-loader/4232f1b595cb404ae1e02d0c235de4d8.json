{"remainingRequest":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/babel-loader/lib/index.js!/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/src/components/BarChart.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/src/components/BarChart.vue","mtime":1705749900264},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/babel.config.js","mtime":1703791909061},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/cache-loader/dist/cjs.js","mtime":1705744300535},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/babel-loader/lib/index.js","mtime":1705744300565},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/cache-loader/dist/cjs.js","mtime":1705744300535},{"path":"/Users/rohamjabbari/Desktop/VIS/A5/vis-vue-d3/node_modules/vue-loader/lib/index.js","mtime":1705744299123}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["d3","name","props","data","svgWidth","window","innerWidth","svgHeight","innerHeight","zoomedXScale","svgPadding","top","right","bottom","left","mounted","drawChart","xScale","addBrush","initialize","methods","removeSelection","$store","commit","localbrushedCountries","filteredData","forEach","d","push","id","resetZoom","$refs","chart","clientWidth","select","chartGroup","attr","drawXAxis","drawYAxis","drawBars","transition","duration","selectedData","filter","selectedCountries","includes","map","country","xAxisGroup","axisX","call","axisBottom","selectAll","style","opacity","length","bind","label","empty","append","text","axisY","axisLeft","yScale","barsGroup","tooltip","brushedData","brushedCountries","join","enter","bandwidth","value","update","exit","remove","countryData","find","s","isSelected","getColorForCountry","on","event","handleBarClick","landCoverTemp","carbonStocksTemp","disastersFreqTemp","hoveringLandCover","landCover","hoveringCarbonStocks","carbonStocks","hoveringDisasters","disastersFreq","toFixed","html","clientX","clientY","countryId","colors","landCoverData","carbonStocksData","landCoverCategory","getLandCoverCategory","carbonStocksCategory","getCarbonStocksCategory","xFirstTick","landCoverMin","landCoverMax","xSecondTick","xThresholds","yFirstTick","carbonStocksMin","carbonStocksMax","ySecondTick","yThresholds","brush","brushX","extent","onBrush","brushGroup","selection","brushedIds","x0","x1","x","idleTimeout","setTimeout","move","computed","filtered","sort","a","b","descending","get","getters","dataMax","dataMin","scaleBand","rangeRound","padding","domain","scaleLinear","watch","handler","deep"],"sources":["src/components/BarChart.vue"],"sourcesContent":["<template>\n  <div class=\"vis-component\" ref=\"chart\">\n    <h6>Disasters Frequency per Country</h6>\n    <svg id=\"bar-svg\" :width=\"svgWidth\" :height=\"svgHeight\" @dblclick=\"resetZoom\" >\n      <g class=\"chart-group\" ref=\"chartGroup\">\n        <g class=\"brush-group\" ref=\"brushGroup\"></g>\n        <g class=\"axis axis-x\" ref=\"axisX\"></g>\n        <g class=\"axis axis-y\" ref=\"axisY\"></g>\n        <g class=\"bars-group\" ref=\"barsGroup\"></g>\n      </g>\n    </svg>\n    <div id=\"tooltip\" class=\"tooltip\" style=\"opacity:0;\"></div>\n  </div>\n</template>\n\n<script>\n\nimport * as d3 from 'd3';\n\nexport default {\n  name: 'BarChart',\n  props: {\n  },\n  data() {\n    const svgWidth = window.innerWidth * 4 / 12;\n    const svgHeight = window.innerHeight * 0.35;\n    return {\n      zoomedXScale: null,\n      // zoomedYScale: null,\n      svgWidth: svgWidth,\n      svgHeight: svgHeight,\n      svgPadding: {\n        top: 5, right: 20, bottom: 120, left: 100,\n      }\n      \n    }\n  },\n  mounted() {\n    this.drawChart(this.xScale);\n    this.addBrush();\n    this.initialize();\n  },\n  methods: {\n    removeSelection() {\n      this.$store.commit('removeSelectedCountries');\n    },\n    initialize() {\n      var localbrushedCountries = [];\n      this.filteredData.forEach(d => localbrushedCountries.push(d.id));\n      this.$store.commit('changeBrushedCountries', localbrushedCountries);\n    },\n    resetZoom() {\n      this.zoomedXScale = null;\n      var localbrushedCountries = [];\n      this.$store.commit('changeBrushedCountries', localbrushedCountries);\n      this.initialize();\n      this.drawChart(this.xScale);\n    },\n    drawChart(xScale) {\n      if (this.$refs.chart) this.svgWidth = this.$refs.chart.clientWidth;\n      d3.select(this.$refs.chartGroup)\n        .attr('transform', `translate(${this.svgPadding.left},${this.svgPadding.top})`);\n      this.drawXAxis(xScale);\n      this.drawYAxis();\n      this.drawBars(xScale);\n    },\n    drawXAxis(xScale) {\n      const transition = d3.transition().duration(750); // Duration in milliseconds\n\n      const selectedData = this.filteredData.filter(d => this.selectedCountries.includes(d.id)).map(d => d.country);\n\n      const xAxisGroup = d3.select(this.$refs.axisX)\n        .attr('transform', `translate( 0, ${this.svgHeight - this.svgPadding.top - this.svgPadding.bottom} )`)\n        .transition(transition) // Apply transition to the axis group\n        .call(d3.axisBottom(xScale));\n\n      xAxisGroup.selectAll('text')\n        .attr('y', '7px')\n        .attr('x', '15px')\n        .style('text-anchor', 'start')\n        .attr('dx', '-.8em')\n        .attr('dy', '.15em')\n        .attr('transform', 'rotate(60)')\n        .style('font-size', '10px')\n        .attr('opacity', function(d) {\n            // Check if the country ID is in the selectedCountries array\n            let opacity = 0;\n            if (selectedData && selectedData.length !== 0) {\n              opacity = selectedData.includes(d) ? 1 : 0;\n            } else if (this.filteredData.length < 90) {\n              opacity = 1\n            } else {\n              opacity = 0\n            }\n            return opacity;\n\n        }.bind(this));\n\n      const label = d3.select(this.$refs.axisX).select('.x-axis-label');\n      if (label.empty()) {\n        d3.select(this.$refs.axisX) // Append to the main group, not the transitioning group\n          .append('text')\n          .attr('class', 'x-axis-label')\n          .attr('x', this.svgWidth / 2)\n          .attr('y', this.svgHeight *2) \n          .style('text-anchor', 'middle')\n          .style('font-size', '12px')\n          .text('Countries');\n      }\n\n    },\n    drawYAxis() {\n      d3.select(this.$refs.axisY)\n        .call(d3.axisLeft(this.yScale))\n        .style('font-size', '10px')\n        .append('text')\n        .attr('transform', 'rotate(-90)')\n        .attr('x', -this.svgHeight/2 + this.svgPadding.top + this.svgPadding.bottom - 30)\n        .attr('y', -this.svgPadding.left +55)\n        .attr('dy', '0.71em')\n        .attr('text-anchor', 'end')\n        .attr('fill', 'black')\n        .style('font-size', '12px')\n        .text(\"Disaster Frequency\");\n    },\n    drawBars(xScale) {\n      const barsGroup = d3.select(this.$refs.barsGroup);\n      const tooltip = d3.select(\"#tooltip\");\n      const transition = d3.transition().duration(750);\n\n      // Filter the data to only include brushed countries\n      const brushedData = this.brushedCountries.length\n        ? this.filteredData.filter(d => this.brushedCountries.includes(d.id))\n        : this.filteredData;\n\n      barsGroup.selectAll('.bar')\n        .data(brushedData, function(d) { return d.id; })\n        .join(\n          enter => enter.append('rect')\n            .attr('class', 'bar')\n            .attr('x', (d) => xScale(d.country))\n            .attr('width', xScale.bandwidth())\n            .attr('y', this.svgHeight - this.svgPadding.top - this.svgPadding.bottom) // Start from bottom\n            .attr('height', 0) \n            .call(enter => enter.transition(transition) // Transition on enter\n              .attr('y', (d) => this.yScale(d.value))\n              .attr('height', (d) => this.svgHeight - this.svgPadding.top - this.svgPadding.bottom - this.yScale(d.value))),\n          update => update.call(update => update.transition(transition) // Transition on update\n            .attr('x', (d) => xScale(d.country))\n            .attr('width', xScale.bandwidth())\n            .attr('y', (d) => this.yScale(d.value))\n            .attr('height', (d) => this.svgHeight - this.svgPadding.top - this.svgPadding.bottom - this.yScale(d.value))),\n          exit => exit.call(exit => exit.transition(transition) // Transition on exit\n            .attr('y', this.svgHeight - this.svgPadding.top - this.svgPadding.bottom)\n            .attr('height', 0)\n            .remove())\n        )\n        .attr('fill', d => {\n          const countryData = this.filteredData.find(s => s.id === d.id);\n          const isSelected = this.selectedCountries.includes(d.id);\n          if (countryData.country) {\n            if (isSelected) {\n              if (this.brushedCountries.includes(countryData.id)) {\n                return 'rgb(253, 255, 181)';\n              } else {\n                return 'rgb(150, 150, 150)';\n              }\n            } else {\n              if (this.brushedCountries.includes(countryData.id)) {\n                return this.getColorForCountry(countryData);\n              } else {\n                return 'rgb(130, 130, 130)';\n              }\n            }\n          } else {\n            return 'darkgrey';\n          }\n        })\n        .on('click', (event, d) => this.handleBarClick(d.id))\n        .on('mouseover', (event, d) => {\n          let landCoverTemp;\n          let carbonStocksTemp;\n          let disastersFreqTemp;\n          const hoveringLandCover = this.landCover.find(country => country.id === d.id);\n          const hoveringCarbonStocks = this.carbonStocks.find(country => country.id === d.id);\n          const hoveringDisasters = this.disastersFreq.find(country => country.id === d.id)\n          if (hoveringLandCover) {\n            landCoverTemp = hoveringLandCover.value === 0 ? 'No Data' : hoveringLandCover.value.toFixed(4);\n          } else {\n            landCoverTemp = 'No Data';\n          }\n          if (hoveringCarbonStocks) {\n            carbonStocksTemp = hoveringCarbonStocks.value === 0 ? 'No Data' : hoveringCarbonStocks.value.toFixed(4);\n          } else {\n            carbonStocksTemp = 'No Data';\n          }\n          if (hoveringDisasters) {\n            disastersFreqTemp = hoveringDisasters.value === -1 ? 'No Data' : hoveringDisasters.value;\n          } else {\n            disastersFreqTemp = 'No Data';\n          }\n          tooltip.transition()\n            .duration(200)\n            .style('opacity', 1);\n\n\n          tooltip.html(`\n            <table>\n              <tr><td class=\"label\">Country:</td>         <td class=\"value\">${d.country}</td></tr>\n              <tr><td class=\"label\">CarbonStocks:</td>        <td class=\"value\">${carbonStocksTemp}</td></tr>\n              <tr><td class=\"label\">LandCoverIndex:</td>     <td class=\"value\">${landCoverTemp}</td></tr>\n              <tr><td class=\"label\">disastersFreq:</td>     <td class=\"value\">${disastersFreqTemp}</td></tr>\n            </table>\n          `)\n            .style('left', (event.clientX - 275) + 'px')\n            .style('top', (event.clientY - 400) + 'px');\n        })\n        .on('mouseout', () => {\n          tooltip.transition().duration(500).style('opacity', 0);\n          \n        });\n    },\n\n    handleBarClick(countryId) {\n      const isSelected = this.selectedCountries.includes(countryId);\n      if (!isSelected) {\n        this.$store.commit('changeSelectedCountries', countryId);\n      } else {\n        this.$store.commit('removeSelectedCountry', countryId);\n      }\n    },\n    getColorForCountry(countryData) {\n      const colors = [\n        \"rgb(230, 230, 230)\",\n        \"rgb(220, 183, 210)\", // 0 1 \n        \"rgb(211, 146, 194)\", // 0 0 \n        \"rgb(195, 238, 199)\", // 1 2 \n        \"rgb(151, 185, 199)\", \n        \"rgb(168, 140, 191)\", // 1 0 \n        \"rgb(148, 221, 166)\", // 2 2 \n        \"rgb(129, 186, 162)\", // 2 1 \n        \"rgb(107, 120, 155)\",\n      ];\n      const landCoverData = this.landCover.find(country => country.id === countryData.id);\n      const carbonStocksData = this.carbonStocks.find(country => country.id === countryData.id);\n      if (!landCoverData || !carbonStocksData) {\n        // Handle the case where data is not available for the country\n        return 'darkgrey';\n      }\n      let landCoverCategory = this.getLandCoverCategory(landCoverData.value);\n      let carbonStocksCategory = this.getCarbonStocksCategory(carbonStocksData.value);\n\n      if (carbonStocksCategory === 'low' && landCoverCategory === 'low') return colors[0];\n      if (carbonStocksCategory === 'low' && landCoverCategory === 'medium') return colors[1];\n      if (carbonStocksCategory === 'low' && landCoverCategory === 'high') return colors[2];\n      if (carbonStocksCategory === 'medium' && landCoverCategory === 'low') return colors[3];\n      if (carbonStocksCategory === 'medium' && landCoverCategory === 'medium') return colors[4];\n      if (carbonStocksCategory === 'medium' && landCoverCategory === 'high') return colors[5];\n      if (carbonStocksCategory === 'high' && landCoverCategory === 'low') return colors[6];\n      if (carbonStocksCategory === 'high' && landCoverCategory === 'medium') return colors[7];\n      if (carbonStocksCategory === 'high' && landCoverCategory === 'high') return colors[8];\n    },\n    getLandCoverCategory(landCover) {\n      const xFirstTick = this.landCoverMin + (this.landCoverMax - this.landCoverMin) / 3;\n      const xSecondTick = this.landCoverMin + 2 * (this.landCoverMax - this.landCoverMin) / 3;\n      const xThresholds = [xFirstTick, xSecondTick];\n      if (landCover <= xThresholds[0]) return 'low';\n      if (landCover <= xThresholds[1]) return 'medium';\n      return 'high';\n    },\n\n    getCarbonStocksCategory(carbonStocks) {\n      const yFirstTick = this.carbonStocksMin + (this.carbonStocksMax - this.carbonStocksMin) / 3;\n      const ySecondTick = this.carbonStocksMin + 2 * (this.carbonStocksMax - this.carbonStocksMin) / 3;\n      const yThresholds = [yFirstTick, ySecondTick];\n      if (carbonStocks <= yThresholds[0]) return 'low';\n      if (carbonStocks <= yThresholds[1]) return 'medium';\n      return 'high';\n    },\n\n    addBrush() {\n      this.brush = d3.brushX()\n        .extent([[0,0], [this.svgWidth - this.svgPadding.left - this.svgPadding.right, \n          this.svgHeight - this.svgPadding.bottom - this.svgPadding.top]])\n        .on('end', this.onBrush);\n      \n      d3.select(this.$refs.brushGroup)\n        .attr('class', 'brush')\n        .call(this.brush);\n    },\n    // get states in brush\n    onBrush(event) {\n      var selection = event.selection;\n      var brushedIds = [];\n      var xScale;\n      if (this.zoomedXScale) {\n        xScale = this.zoomedXScale;\n      } else {\n        xScale = this.xScale\n      }\n\n      if (selection) {\n        const [x0, x1] = selection;\n        \n        // Filter the data based on the brushed selection\n        brushedIds = this.filteredData\n          .filter(d => {\n            const x = xScale(d.country);\n            return x >= x0 && x <= x1;\n          })\n          .map(d => d.id);\n      }\n      this.drawBars(xScale); // Redraw bars with updated data\n        \n      var idleTimeout;\n      if (!selection) {\n        if (!idleTimeout) return idleTimeout = setTimeout(() => {\n          idleTimeout = null\n        }, 1) \n      }\n      d3.select('#bar-svg').select(\".brush\").call(this.brush.move, null)\n\n      this.$store.commit('changeBrushedCountries', brushedIds);\n    },\n    \n  },\n  computed: {\n    \n    filteredData() {\n      let filtered = this.disastersFreq.filter(d => d.value > 0);\n      if (this.brushedCountries.length > 0) {\n        filtered = filtered.filter(d => this.brushedCountries.includes(d.id));\n      }\n      filtered.sort((a, b) => d3.descending(+a.value, +b.value));\n      return filtered;\n    },\n    landCover: {\n      get() {\n        return this.$store.getters.landCover;\n      }\n    },\n    carbonStocks: {\n      get() {\n        return this.$store.getters.carbonStocks;\n      }\n    },\n    disastersFreq: {\n      get() {\n        return this.$store.getters.disastersFreq;\n      }\n    },\n    dataMax() {\n      return 40;\n    },\n    dataMin() {\n      return 0;\n    },\n    carbonStocksMax() {\n      return 200;\n    },\n    carbonStocksMin() {\n      return 0;\n    },\n    landCoverMax() {\n      return 130;\n    },\n    landCoverMin() {\n      return 70;\n    },\n    xScale() {\n      return d3.scaleBand()\n        .rangeRound([0, this.svgWidth - this.svgPadding.left - this.svgPadding.right]).padding(0.15)\n        .domain(this.filteredData.map((d) => d.country));\n    },\n    yScale() {\n      return d3.scaleLinear()\n        .rangeRound([this.svgHeight - this.svgPadding.top - this.svgPadding.bottom, 0])\n        .domain([this.dataMin > 0 ? 0 : this.dataMin, this.dataMax]);\n    },\n    selectedCountries: {\n      get() {\n        return this.$store.getters.selectedCountries;\n      }\n    },\n    brushedCountries: {\n      get() {\n        return this.$store.getters.brushedCountries;\n      }\n    },\n  },\n  watch: {\n    landCover: {\n      handler() {\n        this.drawChart(this.xScale);\n      },\n      deep: true,\n    },\n    carbonStocks: {\n      handler() {\n        this.drawChart(this.xScale);\n      },\n      deep: true,\n    },\n    disastersFreq: {\n      handler() {\n        this.drawChart(this.xScale);\n      },\n      deep: true,\n    },\n    brushedCountries: {\n      handler() {\n        this.drawChart(this.xScale);\n      },\n      deep: true,\n    },\n    selectedCountries: {\n      handler() {\n        if (this.zoomedXScale) {\n          this.drawChart(this.zoomedXScale);\n        } else {\n          this.drawChart(this.xScale);\n        }\n      },\n      deep: true,\n    }\n  },\n}\n</script>\n\n<style>\n\n.bar:hover {\n  border-width: 1;\n  border-color: rgb(253, 255, 181);\n  opacity: 0.7;\n}\n\n\n</style>\n"],"mappings":"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"}]}